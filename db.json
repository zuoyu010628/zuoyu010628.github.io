{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":1,"renderable":1}],"Cache":[{"_id":"source/_posts/C-11.md","hash":"f096789d584674f2bfa786a8ce58e78886c50de4","modified":1716274251262},{"_id":"source/_posts/C-17.md","hash":"313a1c8cabfb643bd47a01338924e44030f19e54","modified":1716194162565},{"_id":"themes/next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1716184606105},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1716184606105},{"_id":"themes/next/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1716184606105},{"_id":"themes/next/.gitignore","hash":"56f3470755c20311ddd30d421b377697a6e5e68b","modified":1716184606105},{"_id":"themes/next/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1716184606105},{"_id":"themes/next/.travis.yml","hash":"ecca3b919a5b15886e3eca58aa84aafc395590da","modified":1716184606105},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1716184606105},{"_id":"themes/next/README.md","hash":"9b4b7d66aca47f9c65d6321b14eef48d95c4dff1","modified":1716184606105},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1716184606105},{"_id":"themes/next/package.json","hash":"62fad6de02adbbba9fb096cbe2dcc15fe25f2435","modified":1716184606113},{"_id":"themes/next/gulpfile.js","hash":"1b4fc262b89948937b9e3794de812a7c1f2f3592","modified":1716184606109},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"1a435c20ae8fa183d49bbf96ac956f7c6c25c8af","modified":1716184606105},{"_id":"themes/next/_config.yml","hash":"73cdc85ab2b23138de5b3748b73b39dfe453b337","modified":1716277273290},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"aa4cb7aff595ca628cb58160ee1eee117989ec4e","modified":1716184606105},{"_id":"themes/next/.github/config.yml","hash":"1d3f4e8794986817c0fead095c74f756d45f91ed","modified":1716184606105},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"fca600ddef6f80c5e61aeed21722d191e5606e5b","modified":1716184606105},{"_id":"themes/next/.github/issue-close-app.yml","hash":"7cba457eec47dbfcfd4086acd1c69eaafca2f0cd","modified":1716184606105},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"e554931b98f251fd49ff1d2443006d9ea2c20461","modified":1716184606105},{"_id":"themes/next/.github/lock.yml","hash":"61173b9522ebac13db2c544e138808295624f7fd","modified":1716184606105},{"_id":"themes/next/.github/mergeable.yml","hash":"0ee56e23bbc71e1e76427d2bd255a9879bd36e22","modified":1716184606105},{"_id":"themes/next/.github/release-drafter.yml","hash":"3cc10ce75ecc03a5ce86b00363e2a17eb65d15ea","modified":1716184606105},{"_id":"themes/next/.github/stale.yml","hash":"fdf82de9284f8bc8e0b0712b4cc1cb081a94de59","modified":1716184606105},{"_id":"themes/next/.github/support.yml","hash":"d75db6ffa7b4ca3b865a925f9de9aef3fc51925c","modified":1716184606105},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"c7a994b9542040317d8f99affa1405c143a94a38","modified":1716184606105},{"_id":"themes/next/docs/AUTHORS.md","hash":"10135a2f78ac40e9f46b3add3e360c025400752f","modified":1716184606105},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1716184606105},{"_id":"themes/next/docs/DATA-FILES.md","hash":"cddbdc91ee9e65c37a50bec12194f93d36161616","modified":1716184606105},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"94dc3404ccb0e5f663af2aa883c1af1d6eae553d","modified":1716184606109},{"_id":"themes/next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1716184606109},{"_id":"themes/next/docs/INSTALLATION.md","hash":"af88bcce035780aaa061261ed9d0d6c697678618","modified":1716184606105},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"8b6e4b2c9cfcb969833092bdeaed78534082e3e6","modified":1716184606109},{"_id":"themes/next/languages/ar.yml","hash":"9815e84e53d750c8bcbd9193c2d44d8d910e3444","modified":1716184606109},{"_id":"themes/next/languages/de.yml","hash":"74c59f2744217003b717b59d96e275b54635abf5","modified":1716184606109},{"_id":"themes/next/docs/MATH.md","hash":"d645b025ec7fb9fbf799b9bb76af33b9f5b9ed93","modified":1716184606109},{"_id":"themes/next/languages/en.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1716184606109},{"_id":"themes/next/languages/default.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1716184606109},{"_id":"themes/next/languages/es.yml","hash":"c64cf05f356096f1464b4b1439da3c6c9b941062","modified":1716184606109},{"_id":"themes/next/languages/fr.yml","hash":"752bf309f46a2cd43890b82300b342d7218d625f","modified":1716184606109},{"_id":"themes/next/languages/fa.yml","hash":"3676b32fda37e122f3c1a655085a1868fb6ad66b","modified":1716184606109},{"_id":"themes/next/languages/hu.yml","hash":"b1ebb77a5fd101195b79f94de293bcf9001d996f","modified":1716184606109},{"_id":"themes/next/languages/it.yml","hash":"44759f779ce9c260b895532de1d209ad4bd144bf","modified":1716184606109},{"_id":"themes/next/languages/id.yml","hash":"572ed855d47aafe26f58c73b1394530754881ec2","modified":1716184606109},{"_id":"themes/next/languages/ja.yml","hash":"0cf0baa663d530f22ff380a051881216d6adcdd8","modified":1716184606109},{"_id":"themes/next/languages/ko.yml","hash":"0feea9e43cd399f3610b94d755a39fff1d371e97","modified":1716184606109},{"_id":"themes/next/languages/pt-BR.yml","hash":"67555b1ba31a0242b12fc6ce3add28531160e35b","modified":1716184606109},{"_id":"themes/next/languages/pt.yml","hash":"718d131f42f214842337776e1eaddd1e9a584054","modified":1716184606109},{"_id":"themes/next/languages/ru.yml","hash":"e993d5ca072f7f6887e30fc0c19b4da791ca7a88","modified":1716184606109},{"_id":"themes/next/languages/nl.yml","hash":"5af3473d9f22897204afabc08bb984b247493330","modified":1716184606109},{"_id":"themes/next/languages/tr.yml","hash":"2b041eeb8bd096f549464f191cfc1ea0181daca4","modified":1716184606109},{"_id":"themes/next/languages/uk.yml","hash":"3a6d635b1035423b22fc86d9455dba9003724de9","modified":1716184606109},{"_id":"themes/next/languages/vi.yml","hash":"93393b01df148dcbf0863f6eee8e404e2d94ef9e","modified":1716184606109},{"_id":"themes/next/languages/zh-CN.yml","hash":"a1f15571ee7e1e84e3cc0985c3ec4ba1a113f6f8","modified":1716184606109},{"_id":"themes/next/languages/zh-HK.yml","hash":"3789f94010f948e9f23e21235ef422a191753c65","modified":1716184606109},{"_id":"themes/next/languages/zh-TW.yml","hash":"8c09da7c4ec3fca2c6ee897b2eea260596a2baa1","modified":1716184606109},{"_id":"themes/next/layout/archive.swig","hash":"e4e31317a8df68f23156cfc49e9b1aa9a12ad2ed","modified":1716184606113},{"_id":"themes/next/layout/_layout.swig","hash":"6a6e92a4664cdb981890a27ac11fd057f44de1d5","modified":1716184606109},{"_id":"themes/next/layout/index.swig","hash":"7f403a18a68e6d662ae3e154b2c1d3bbe0801a23","modified":1716184606113},{"_id":"themes/next/layout/category.swig","hash":"1bde61cf4d2d171647311a0ac2c5c7933f6a53b0","modified":1716184606113},{"_id":"themes/next/layout/page.swig","hash":"db581bdeac5c75fabb0f17d7c5e746e47f2a9168","modified":1716184606113},{"_id":"themes/next/layout/tag.swig","hash":"0dfb653bd5de980426d55a0606d1ab122bd8c017","modified":1716184606113},{"_id":"themes/next/scripts/renderer.js","hash":"49a65df2028a1bc24814dc72fa50d52231ca4f05","modified":1716184606113},{"_id":"themes/next/layout/post.swig","hash":"2f6d992ced7e067521fdce05ffe4fd75481f41c5","modified":1716184606113},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"12d99fb8b62bd9e34d9672f306c9ae4ace7e053e","modified":1716184606105},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"c3e6b8196c983c40fd140bdeca012d03e6e86967","modified":1716184606105},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"d3efc0df0275c98440e69476f733097916a2d579","modified":1716184606105},{"_id":"themes/next/.github/ISSUE_TEMPLATE/question.md","hash":"53df7d537e26aaf062d70d86835c5fd8f81412f3","modified":1716184606105},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"5237a368ab99123749d724b6c379415f2c142a96","modified":1716184606109},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"0bd2d696f62a997a11a7d84fec0130122234174e","modified":1716184606109},{"_id":"themes/next/docs/ru/README.md","hash":"85dd68ed1250897a8e4a444a53a68c1d49eb7e11","modified":1716184606109},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"fb23b85db6f7d8279d73ae1f41631f92f64fc864","modified":1716184606109},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"9c4fe2873123bf9ceacab5c50d17d8a0f1baef27","modified":1716184606109},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"34b88784ec120dfdc20fa82aadeb5f64ef614d14","modified":1716184606109},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"ca1030efdfca5e20f9db2e7a428998e66a24c0d0","modified":1716184606109},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"579c7bd8341873fb8be4732476d412814f1a3df7","modified":1716184606109},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"8b18f84503a361fc712b0fe4d4568e2f086ca97d","modified":1716184606109},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"d3f03be036b75dc71cf3c366cd75aee7c127c874","modified":1716184606109},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"b92585d251f1f9ebe401abb5d932cb920f9b8b10","modified":1716184606109},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"9c8dc0b8170679cdc1ee9ee8dbcbaebf3f42897b","modified":1716184606109},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"71655ca21907e9061b6e8ac52d0d8fbf54d0062b","modified":1716184606109},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"d9ce7331c1236bbe0a551d56cef2405e47e65325","modified":1716184606109},{"_id":"themes/next/docs/zh-CN/README.md","hash":"c038629ff8f3f24e8593c4c8ecf0bef3a35c750d","modified":1716184606109},{"_id":"themes/next/layout/_partials/languages.swig","hash":"ba9e272f1065b8f0e8848648caa7dea3f02c6be1","modified":1716184606109},{"_id":"themes/next/layout/_partials/comments.swig","hash":"db6ab5421b5f4b7cb32ac73ad0e053fdf065f83e","modified":1716184606109},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1716184606109},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"83a40ce83dfd5cada417444fb2d6f5470aae6bb0","modified":1716184606109},{"_id":"themes/next/layout/_scripts/index.swig","hash":"cea942b450bcb0f352da78d76dc6d6f1d23d5029","modified":1716184606109},{"_id":"themes/next/layout/_macro/post.swig","hash":"090b5a9b6fca8e968178004cbd6cff205b7eba57","modified":1716184606109},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"d1f2bfde6f1da51a2b35a7ab9e7e8eb6eefd1c6b","modified":1716184606109},{"_id":"themes/next/layout/_scripts/three.swig","hash":"a4f42f2301866bd25a784a2281069d8b66836d0b","modified":1716184606109},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"4d2c93c66e069852bb0e3ea2e268d213d07bfa3f","modified":1716184606109},{"_id":"themes/next/layout/_partials/footer.swig","hash":"4369b313cbbeae742cb35f86d23d99d4285f7359","modified":1716184606109},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"b782eb2e34c0c15440837040b5d65b093ab6ec04","modified":1716184606109},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"311e5eceec9e949f1ea8d623b083cec0b8700ff2","modified":1716184606113},{"_id":"themes/next/layout/_third-party/index.swig","hash":"70c3c01dd181de81270c57f3d99b6d8f4c723404","modified":1716184606113},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"ef38c213679e7b6d2a4116f56c9e55d678446069","modified":1716184606109},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"2731e262a6b88eaee2a3ca61e6a3583a7f594702","modified":1716184606113},{"_id":"themes/next/scripts/events/index.js","hash":"5743cde07f3d2aa11532a168a652e52ec28514fd","modified":1716184606113},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"aec50ed57b9d5d3faf2db3c88374f107203617e0","modified":1716184606113},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"703bdd142a671b4b67d3d9dfb4a19d1dd7e7e8f7","modified":1716184606113},{"_id":"themes/next/scripts/filters/locals.js","hash":"b193a936ee63451f09f8886343dcfdca577c0141","modified":1716184606113},{"_id":"themes/next/scripts/filters/minify.js","hash":"19985723b9f677ff775f3b17dcebf314819a76ac","modified":1716184606113},{"_id":"themes/next/scripts/filters/post.js","hash":"44ba9b1c0bdda57590b53141306bb90adf0678db","modified":1716184606113},{"_id":"themes/next/scripts/helpers/font.js","hash":"40cf00e9f2b7aa6e5f33d412e03ed10304b15fd7","modified":1716184606113},{"_id":"themes/next/scripts/helpers/engine.js","hash":"bdb424c3cc0d145bd0c6015bb1d2443c8a9c6cda","modified":1716184606113},{"_id":"themes/next/scripts/tags/button.js","hash":"8c6b45f36e324820c919a822674703769e6da32c","modified":1716184606113},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"958e86b2bd24e4fdfcbf9ce73e998efe3491a71f","modified":1716184606113},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"5e11f30ddb5093a88a687446617a46b048fa02e5","modified":1716184606113},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"94e0bbc7999b359baa42fa3731bdcf89c79ae2b3","modified":1716184606113},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f1826ade2d135e2f60e2d95cb035383685b3370c","modified":1716184606113},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1716184606113},{"_id":"themes/next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1716184606113},{"_id":"themes/next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1716184606113},{"_id":"themes/next/scripts/tags/pdf.js","hash":"8c613b39e7bff735473e35244b5629d02ee20618","modified":1716184606113},{"_id":"themes/next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1716184606113},{"_id":"themes/next/source/css/_colors.styl","hash":"a8442520f719d3d7a19811cb3b85bcfd4a596e1f","modified":1716184606113},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"d902fd313e8d35c3cc36f237607c2a0536c9edf1","modified":1716184606113},{"_id":"themes/next/source/css/main.styl","hash":"a3a3bbb5a973052f0186b3523911cb2539ff7b88","modified":1716184606113},{"_id":"themes/next/scripts/tags/tabs.js","hash":"93d8a734a3035c1d3f04933167b500517557ba3e","modified":1716184606113},{"_id":"themes/next/source/css/_mixins.styl","hash":"e31a557f8879c2f4d8d5567ee1800b3e03f91f6e","modified":1716184606113},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1716184606113},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1716184606113},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1716184606113},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1716184606113},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1716184606113},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1716184606113},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1716184606113},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1716184606113},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1716184606113},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1716184606113},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1716184606113},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1716184606113},{"_id":"themes/next/source/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1716184606113},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1716184606113},{"_id":"themes/next/source/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1716184606113},{"_id":"themes/next/source/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1716184606113},{"_id":"themes/next/source/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1716184606113},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"000bad572d76ee95d9c0a78f9ccdc8d97cc7d4b4","modified":1716184606109},{"_id":"themes/next/source/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1716184606113},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"810d544019e4a8651b756dd23e5592ee851eda71","modified":1716184606109},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"c70f8e71e026e878a4e9d5ab3bbbf9b0b23c240c","modified":1716184606109},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"7dbe93b8297b746afb89700b4d29289556e85267","modified":1716184606109},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"9440d8a3a181698b80e1fa47f5104f4565d8cdf3","modified":1716184606109},{"_id":"themes/next/source/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1716184606113},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"c851717497ca64789f2176c9ecd1dedab237b752","modified":1716184606109},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"ae2261bea836581918a1c2b0d1028a78718434e0","modified":1716184606109},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"d31f896680a6c2f2c3f5128b4d4dd46c87ce2130","modified":1716184606109},{"_id":"themes/next/layout/_partials/post/post-followme.swig","hash":"ceba16b9bd3a0c5c8811af7e7e49d0f9dcb2f41e","modified":1716184606109},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"9b7a66791d7822c52117fe167612265356512477","modified":1716184606109},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"954ad71536b6eb08bd1f30ac6e2f5493b69d1c04","modified":1716184606109},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":1716184606109},{"_id":"themes/next/source/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1716184606113},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"f79c44692451db26efce704813f7a8872b7e63a0","modified":1716184606109},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"2b1a73556595c37951e39574df5a3f20b2edeaef","modified":1716184606109},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"48430bd03b8f19c9b8cdb2642005ed67d56c6e0b","modified":1716184606109},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"2be50f9bfb1c56b85b3b6910a7df27f51143632c","modified":1716184606109},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"077b5d66f6309f2e7dcf08645058ff2e03143e6c","modified":1716184606109},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"c46849e0af8f8fb78baccd40d2af14df04a074af","modified":1716184606109},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1716184606109},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1716184606109},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"f48a6a8eba04eb962470ce76dd731e13074d4c45","modified":1716184606109},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1716184606109},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1716184606109},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1716184606109},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"1472cabb0181f60a6a0b7fec8899a4d03dfb2040","modified":1716184606109},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"5adea065641e8c55994dd2328ddae53215604928","modified":1716184606109},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"f910618292c63871ca2e6c6e66c491f344fa7b1f","modified":1716184606113},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1716184606113},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"2fa2b51d56bfac6a1ea76d651c93b9c20b01c09b","modified":1716184606109},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"f39a5bf3ce9ee9adad282501235e0c588e4356ec","modified":1716184606113},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b14908644225d78c864cd0a9b60c52407de56183","modified":1716184606113},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"82f5b6822aa5ec958aa987b101ef860494c6cf1f","modified":1716184606113},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"f7a9eca599a682479e8ca863db59be7c9c7508c8","modified":1716184606113},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"d6ceb70648555338a80ae5724b778c8c58d7060d","modified":1716184606113},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"4791c977a730f29c846efcf6c9c15131b9400ead","modified":1716184606113},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"6c5976621efd5db5f7c4c6b4f11bc79d6554885f","modified":1716184606113},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1716184606113},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"d35a999d67f4c302f76fdf13744ceef3c6506481","modified":1716184606113},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"be0a8eccf1f6dc21154af297fc79555343031277","modified":1716184606113},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1716184606113},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1716184606113},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"ecf751321e799f0fb3bf94d049e535130e2547aa","modified":1716184606113},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"4b1986e43d6abce13450d2b41a736dd6a5620a10","modified":1716184606113},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"5f6a966c509680dbfa70433f9d658cee59c304d7","modified":1716184606113},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"b26ac2bfbe91dd88267f8b96aee6bb222b265b7a","modified":1716184606113},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"d56d5af427cdfecc33a0f62ee62c056b4e33d095","modified":1716184606113},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"f3c43664a071ff3c0b28bd7e59b5523446829576","modified":1716184606113},{"_id":"themes/next/scripts/events/lib/config.js","hash":"d34c6040b13649714939f59be5175e137de65ede","modified":1716184606113},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"6661c1c91c7cbdefc6a5e6a034b443b8811235a1","modified":1716184606113},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"d30b0e255a8092043bac46441243f943ed6fb09b","modified":1716184606113},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"f233d8d0103ae7f9b861344aa65c1a3c1de8a845","modified":1716184606113},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"4c0c99c7e0f00849003dfce02a131104fb671137","modified":1716184606113},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"2486f3e0150c753e5f3af1a3665d074704b8ee2c","modified":1716184606113},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"7f2d93af012c1e14b8596fecbfc7febb43d9b7f5","modified":1716184606113},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"a54708fd9309b4357c423a3730eb67f395344a5e","modified":1716184606113},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"7f8b92913d21070b489457fa5ed996d2a55f2c32","modified":1716184606113},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"e51dc3072c1ba0ea3008f09ecae8b46242ec6021","modified":1716184606113},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"d5fefc31fba4ab0188305b1af1feb61da49fdeb0","modified":1716184606113},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"62df49459d552bbf73841753da8011a1f5e875c8","modified":1716184606113},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"6cbd85f9433c06bae22225ccf75ac55e04f2d106","modified":1716184606113},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"f4e694e5db81e57442c7e34505a416d818b3044a","modified":1716184606113},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"f70be8e229da7e1715c11dd0e975a2e71e453ac8","modified":1716184606113},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"612ec843372dae709acb17112c1145a53450cc59","modified":1716184606113},{"_id":"themes/next/source/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1716184606113},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1716184606113},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"ca5e70662dcfb261c25191cc5db5084dcf661c76","modified":1716184606113},{"_id":"themes/next/source/css/_variables/base.styl","hash":"818508748b7a62e02035e87fe58e75b603ed56dc","modified":1716184606113},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"a47725574e1bee3bc3b63b0ff2039cc982b17eff","modified":1716184606113},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"8e7b57a72e757cf95278239641726bb2d5b869d1","modified":1716184606113},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1716184606117},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"681d33e3bc85bdca407d93b134c089264837378c","modified":1716184606113},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"2e3bf7baf383c9073ec5e67f157d3cb3823c0957","modified":1716184606113},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"a1690e035b505d28bdef2b4424c13fc6312ab049","modified":1716184606113},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"0b2c4b78eead410020d7c4ded59c75592a648df8","modified":1716184606113},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"a2e9e00962e43e98ec2614d6d248ef1773bb9b78","modified":1716184606113},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"b1f0fab7344a20ed6748b04065b141ad423cf4d9","modified":1716184606113},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1716184606113},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"8f58570a1bbc34c4989a47a1b7d42a8030f38b06","modified":1716184606113},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"18ce72d90459c9aa66910ac64eae115f2dde3767","modified":1716184606113},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"179e33b8ac7f4d8a8e76736a7e4f965fe9ab8b42","modified":1716184606113},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"f6516d0f7d89dc7b6c6e143a5af54b926f585d82","modified":1716184606113},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1716184606117},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"bb7ace23345364eb14983e860a7172e1683a4c94","modified":1716184606113},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1716184606113},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"7785bd756e0c4acede3a47fec1ed7b55988385a5","modified":1716184606113},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"7104b9cef90ca3b140d7a7afcf15540a250218fc","modified":1716184606113},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"6136da4bbb7e70cec99f5c7ae8c7e74f5e7c261a","modified":1716184606113},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"4d1c17345d2d39ef7698f7acf82dfc0f59308c34","modified":1716184606113},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"f0131db6275ceaecae7e1a6a3798b8f89f6c850d","modified":1716184606113},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"93db5dafe9294542a6b5f647643cb9deaced8e06","modified":1716184606113},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"2b2e7b5cea7783c9c8bb92655e26a67c266886f0","modified":1716184606113},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"a717969829fa6ef88225095737df3f8ee86c286b","modified":1716184606113},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1716184606113},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1716184606113},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"e282df938bd029f391c466168d0e68389978f120","modified":1716184606113},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"70a4324b70501132855b5e59029acfc5d3da1ebd","modified":1716184606113},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"85da2f3006f4bef9a2199416ecfab4d288f848c4","modified":1716184606113},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"44f47c88c06d89d06f220f102649057118715828","modified":1716184606113},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fafc96c86926b22afba8bb9418c05e6afbc05a57","modified":1716184606113},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"2bd0eb1512415325653b26d62a4463e6de83c5ac","modified":1716184606113},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1716184606113},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1716184606117},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"e771dcb0b4673e063c0f3e2d73e7336ac05bcd57","modified":1716184606113},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"d21d4ac1982c13d02f125a67c065412085a92ff2","modified":1716184606113},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"e75693f33dbc92afc55489438267869ae2f3db54","modified":1716184606113},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f49ca072b5a800f735e8f01fc3518f885951dd8e","modified":1716184606113},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"902569a9dea90548bec21a823dd3efd94ff7c133","modified":1716184606113},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"ded41fd9d20a5e8db66aaff7cc50f105f5ef2952","modified":1716184606113},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"1e4190c10c9e0c9ce92653b0dbcec21754b0b69d","modified":1716184606113},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"72d495a88f7d6515af425c12cbc67308a57d88ea","modified":1716184606113},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"65cb6edb69e94e70e3291e9132408361148d41d5","modified":1716184606113},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"6a97bcfa635d637dc59005be3b931109e0d1ead5","modified":1716184606113},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"d114b2a531129e739a27ba6271cfe6857aa9a865","modified":1716184606113},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"f5c2788a78790aca1a2f37f7149d6058afb539e0","modified":1716184606113},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"99e12c9ce3d14d4837e3d3f12fc867ba9c565317","modified":1716184606113},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":1716184606113},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"a760ee83ba6216871a9f14c5e56dc9bd0d9e2103","modified":1716184606113},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"8a7fc03a568b95be8d3337195e38bc7ec5ba2b23","modified":1716184606113},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"b49e9fbd3c182b8fc066b8c2caf248e3eb748619","modified":1716184606113},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"e2992846b39bf3857b5104675af02ba73e72eed5","modified":1716184606113},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"9f0b93d109c9aec79450c8a0cf4a4eab717d674d","modified":1716184606113},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9a878d0119785a2316f42aebcceaa05a120b9a7a","modified":1716184606113},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"454a4aebfabb4469b92a8cbb49f46c49ac9bf165","modified":1716184606113},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"e2d606f1ac343e9be4f15dbbaf3464bc4df8bf81","modified":1716184606113},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"e7a9fdb6478b8674b1cdf94de4f8052843fb71d9","modified":1716184606113},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"a793cfff86ad4af818faef04c18013077873f8f0","modified":1716184606113},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"0caf32492692ba8e854da43697a2ec8a41612194","modified":1716184606113},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"5f432a6ed9ca80a413c68b00e93d4a411abf280a","modified":1716184606113},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"45a239edca44acecf971d99b04f30a1aafbf6906","modified":1716184606113},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"b2fc519828fe89a1f8f03ff7b809ad68cd46f3d7","modified":1716184606113},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2cb1876e9e0c9ac32160888af27b1178dbcb0616","modified":1716184606113},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"fa0222197b5eee47e18ac864cdc6eac75678b8fe","modified":1716184606113},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"44487d9ab290dc97871fa8dd4487016deb56e123","modified":1716184606113},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"1f0e7fbe80956f47087c2458ea880acf7a83078b","modified":1716184606113},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"9b479c2f9a9bfed77885e5093b8245cc5d768ec7","modified":1716184606113},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"a960a2dd587b15d3b3fe1b59525d6fa971c6a6ec","modified":1716184606113},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"a05a4031e799bc864a4536f9ef61fe643cd421af","modified":1716184606113},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"b3220db827e1adbca7880c2bb23e78fa7cbe95cb","modified":1716184606113},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"a9cd93c36bae5af9223e7804963096274e8a4f03","modified":1716184606113},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"2a47f8a6bb589c2fb635e6c1e4a2563c7f63c407","modified":1716184606113},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"f71a3e86c05ea668b008cf05a81f67d92b6d65e4","modified":1716184606113},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"d3f73688bb7423e3ab0de1efdf6db46db5e34f80","modified":1716184606113},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"35c871a809afa8306c8cde13651010e282548bc6","modified":1716184606113},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"3b3acc5caa0b95a2598bef4eeacb21bab21bea56","modified":1716184606113},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"1d2778ca5aeeeafaa690dc2766b01b352ab76a02","modified":1716184606113},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"709d10f763e357e1472d6471f8be384ec9e2d983","modified":1716184606113},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"d7fce4b51b5f4b7c31d93a9edb6c6ce740aa0d6b","modified":1716184606113},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"e4d9a77ffe98e851c1202676940097ba28253313","modified":1716184606113},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b49c64f8e9a6ca1c45c0ba98febf1974fdd03616","modified":1716184606113},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"f23670f1d8e749f3e83766d446790d8fd9620278","modified":1716184606113},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"9e4c0653cfd3cc6908fa0d97581bcf80861fb1e7","modified":1716184606113},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1716184606113},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"e740deadcfc4f29c5cb01e40f9df6277262ba4e3","modified":1716184606113},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1716184606117},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1716184606117},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1716184606117},{"_id":"public/archives/index.html","hash":"dc4af7f6dc114412de1ba5ca6c1d384c9cd4fcc9","modified":1716277309176},{"_id":"public/archives/2024/index.html","hash":"1bf9c57826d5ab0f1664a1bc7a8e066a4395d05e","modified":1716277309176},{"_id":"public/archives/2024/05/index.html","hash":"d301c94cdb018d8d8301296e971921e3a02038f5","modified":1716277309176},{"_id":"public/tags/C/index.html","hash":"a94adea782c308a659ec5206852d6c5ddf264d26","modified":1716277309176},{"_id":"public/tags/C-17/index.html","hash":"32c23474c9d76f3a876f070d2f7219984bbde402","modified":1716277309176},{"_id":"public/tags/C-11/index.html","hash":"f7d9b322fca55568b8cd942bda064567510f68b7","modified":1716277309176},{"_id":"public/2024/05/21/C-11/index.html","hash":"552ba0e242224ed6b9efde46ef064be6e2096b9d","modified":1716277309176},{"_id":"public/2024/05/20/C-17/index.html","hash":"c89743fef1a18a501234b3f13a23f6854fb35e03","modified":1716277309176},{"_id":"public/index.html","hash":"da7dee4755d91d65990bb6bc4025c24b46fa1af0","modified":1716277309176},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1716277309176},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1716277309176},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1716277309176},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1716277309176},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1716277309176},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1716277309176},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1716277309176},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1716277309176},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1716277309176},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1716277309176},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1716277309176},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1716277309176},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1716277309176},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1716277309176},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1716277309176},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1716277309176},{"_id":"public/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1716277309176},{"_id":"public/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1716277309176},{"_id":"public/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1716277309176},{"_id":"public/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1716277309176},{"_id":"public/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1716277309176},{"_id":"public/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1716277309176},{"_id":"public/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1716277309176},{"_id":"public/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1716277309176},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1716277309176},{"_id":"public/css/main.css","hash":"c1df52cbf628df2d6695ee3e18947f2aa5445065","modified":1716277309176},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1716277309176},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1716277309176},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1716277309176}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"C++17新特性","date":"2024-05-20T05:50:07.000Z","_content":"\n归纳总结一些常见的（我见过的）或比较好理解的（我能理解的）C++17的特性，具体的全部特性参考链接[C++17 - cppreference.com](https://en.cppreference.com/w/cpp/17)。\n\n## New language features\n\n### Variables\n#### 结构化绑定\n\n首先先举一个例子，在leetcode刷题看题解经常会遇到这种写法。\n\n```c++\nunordered_map<int, int> mp;\nfor (auto &[k , v] : mp) {\n    if (k == 1) {//获取值\n        v = 1;//修改值\n    }\n    ...\n}\n```\n\n其中的  `auto [k, v]`就是结构化绑定，通过结构化绑定，我们可以很方便地获取 `map`对应的值。\n\n除去 `map`之外，还可以应用于 `pair`,`tuple`，结构体和数组，如果加上引用，还可以修改对象的值。\n\n还有就是，可以实现自定义类的结构化绑定以及结构化绑定不能应用于constexpr（据说c++20可以），我不懂就简单提一下。\n\n#### if-switch 语句初始化\n\n举个例子，c++17前，\n\n```c++\nint a = getValue();\nif (a > 10) {\n    //to something\n}\n\nswitch(a) {\n    case 1:\n    default:\n}\n```\n\nc++17后。\n\n```c++\nif (int a = getValue();a > 10) {\n    //to something\n}\n\nswitch(int a = getValue();a) {\n    case 1:\n    default:\n}\n```\n\n#### 内联变量\n\n 在头文件里定义一个内联的变量或者对象，如果这个定义被多个编译单元使用，那么他们都指向同一个唯一的对象。\n\n```c++\n//header file\nclass MyClass\n{\n\tstatic inline std::string name = \"\"; // OK since C++17\n\t//...\n};\ninline MyClass myGlobalObj; // OK even if included/defined by multiple CPP files\n```\n\n引入的原因，首先是c++中，不允许在类中初始化非const静态成员；\n\n> 因为静态成员是属于类，而不属于某个对象，如果在类中初始化，会导致每个对象都包含该静态成员。\n\n其次是如果在被多个cpp引用的头文件中定义类结构之外的变量会导致这些cpp中都定义了这个变量，导致重定义变量。\n\n关于内联就可以再写一篇文章，这就是学习c++让我感到痛苦的地方，平常你轻视的地方，却蕴含着三言两语难以说清楚的门道。\n\n### Templates\n\n#### 类模版参数推导（CATD/class template argument deduction)\n\n```c++\n//before c++17\nstd::vector<FooBar<int, const char*>> obj{a, b, c}; \n//c++17\n std::vector obj{a, b, c};\n```\n\n### constexpr \n\n#### constexpr lambda表达式\n\nC++17允许lambda函数成为constexpr，如果它们满足条件，就可以在需要编译时评估的上下文中使用\n\n```C++\nconstexpr auto lambda = [](int x) { return x * 2; };\nstatic_assert(lambda(5) == 10);\n```\n\n#### 编译期if（compile-time if constexpr）\n\n`if constexpr`是编译期的判断语句\n\n```C++\n//不同输入类型转换为字符串\ntemplate <typename T>\nstd::string convert(T input) {\n    if constexpr (std::is_same_v<T, const char*> ||\n                  std::is_same_v<T, std::string>) {\n        return input;\n    } else {\n        return std::to_string(input);\n    }\n}\n```\n\n### Namespaces\n\n#### 简化的命名空间嵌套（simplified nested namespaces）\n```c++\nnamespace A {\n    namespace B {\n        namespace C {\n            void func();\n        }\n    }\n}\n\n// c++17，更方便更舒适\nnamespace A::B::C {\n    void func();)\n}\n```\n\n### __has_include预处理表达式\n\n用来判断是否有某个头文件，代码可能在不同编译器下工作，不同编译器的可用头文件有可能不同。\n\n### 新增Attribute\n\n首先  `Attribute`是一个关键字，用于指定一个函数、变量、类、模板或类型 trait 应该具有的特殊行为。\n\n#### [[fallthrough]]\n\n通常在使用 switch 语句时，如果case 后没有加break，编译器就会发出警告信息，在case处理部分添加这个属性，用于消除这个警告信息，表示这部分逻辑本意如此。此外该属性只能用在 switch 语句中。\n\n```c++\nswitch (i) {}\n    case 1:\n        xxx; // warning\n    case 2:\n        xxx; \n        [[fallthrough]];// 警告消除\n    case 3:\n        xxx;\n       break;\n}\n```\n\n#### [[nodiscard]]\n\n被此属性修饰的函数，其返回值不应该被丢弃，如果被丢弃编译器就会发出警告信息；如果是修饰的枚举或者类，那么在对应函数返回该类型的时候也不应该丢弃结果。\n\n```c++\n[[nodiscard]] int func();\nvoid F() {\n    func(); // warning 没有处理函数返回值\n}\n```\n\n#### [[maybe_unused]]\n\n通常如果声明了一个变量但是从来没有使用过，编译器就会发出警告信息，使用该属性之后，编译器就会认为是故意为之，从而不再发出警告。需要注意，这个声明不会影响编译器的优化逻辑，在编译优化阶段，无用的变量还是会被处理掉。\n\n### lambda通过*this捕获对象副本（lambda capture of *this）\n\n正常情况下，lambda捕获了this指针，如果this指向的对象析构了，而函数再被调用且访问了成员变量，就会有问题，结果往往是崩溃。\n\n这个新特性让你捕获*this，持有了对象的拷贝，从而避免了上述问题。\n\n```c++\nstruct A {\n    int a;\n    void func() {\n        auto f = [*this] { // 这里\n            cout << a << endl;\n        };\n        f();\n    }  \n};\n```\n\n## New library features\n\n### Utility types\n+ std::any适用于之前使用void*作为通用类型的场景。\n+ std::optional适用于之前使用nullptr代表失败状态的场景。\n+ std::variant适用于之前使用union的场景。\n#### std::any\n\n可以存储任意类型的单个值\n\n```c++\nint main() {\n    std::any a = std::make_any<int>(1);//使用std::make_any创建对象\n    cout << a.type().name() << \" \" << std::any_cast<int>(a) << endl;//使用std::any_cast获取值\n    a = 2.2f;\n    cout << a.type().name() << \" \" << std::any_cast<float>(a) << endl;\n    if (a.has_value()) {//使用has_value（）判断是否有值\n        cout << a.type().name();\n    }\n    a.reset();//销毁所含对象\n    if (a.has_value()) {\n        cout << a.type().name();//type()查询所含的类型，返回typeid\n    }\n    a = emplace<std::string>(\"a\");//使用emplace会销毁之前的对象，构造新的对象\n    return 0;\n}\n```\n\n#### std::optional\n\n见名知意，表示一个值可能存在，没有值就是默认的 std::nullopt\n\n```c++\nstd::optional<int> divide(int a, int b) {\n    if (b == 0) {\n        return std::nullopt;\n    } else {\n        return a / b;\n    }\n}\n```\n\n对 `std::optional`对象使用 `has_valut()`来判断是否有值，使用 `*`或者`value()`来取值\n\n#### std::variant\n类型安全的联合体（可以称之为变化体），功能上与union类似，但是更加高级。\n+ 类型安全，由于存储了内部的类型信息，所有可以进行安全的类型转换\n+ 可以存储复杂类型，union只能存储POD类型（Plain Old Date）\n### Memory management\n\n#### 共享指针支持动态数组（array support for std::shared_ptr）\n\n```C++\nstd::shared_ptr<uint8_t[]> sp(new uint8_t[extraDataLength_], [](uint8_t* ptr) { delete[] ptr; });\n```\n\n### Compile-time programming(to-do)\n\n### Algorithms\n\n#### 并行算法\n\nc++17支持STL并行执行，简单提一下，以std::sort为例\n\n```C++\nstd::sort(exe_policy, begin, end, comp);\n```\n\n可以添加如下三种的执行策略\n\n+ `std::execution::seq`（顺序执行）\n+ `std::execution::par`（并行执行）\n+ `std::execution::par_unseq`（并行和向量化执行）\n\n### Iterators and containers\n\n#### std::map/unordered_map [`try_emplace`](https://en.cppreference.com/w/cpp/container/map/try_emplace)\n\n向`std::map/unordered_map`中插入元素往往使用`emplace`,其操作是如果元素不存在就会插入元素，否则不插入，但是如果元素已经存在，此时仍会构造一次待插入的元素，在判断不需要插入后将该元素立刻析构，所以产生了额外的开销， `try_emplace`就避免了这种问题。\n\n### Others\n\n#### std::string_view\n\n通常我们传递一个string时会触发对象的拷贝操作，大字符串的拷贝赋值操作会触发堆内存分配，很影响运行效率，有了string_view就可以避免拷贝操作，平时传递过程中传递string_view即可。\n\n```c++\nvoid func(std::string_view stv) { cout << stv << endl; }\n\nint main(void) {\n    std::string str = \"Hello World\";\n    std::cout << str << std::endl;\n\n    std::string_view stv(str.c_str(), str.size());\n    cout << stv << endl;\n    func(stv);\n    return 0;\n}\n```\n\n#### std::shared_mutex\n\n\n\n\n\n","source":"_posts/C-17.md","raw":"---\ntitle: C++17新特性\ndate: 2024-05-20 13:50:07\ntags:\n- C++\n- C++17\n---\n\n归纳总结一些常见的（我见过的）或比较好理解的（我能理解的）C++17的特性，具体的全部特性参考链接[C++17 - cppreference.com](https://en.cppreference.com/w/cpp/17)。\n\n## New language features\n\n### Variables\n#### 结构化绑定\n\n首先先举一个例子，在leetcode刷题看题解经常会遇到这种写法。\n\n```c++\nunordered_map<int, int> mp;\nfor (auto &[k , v] : mp) {\n    if (k == 1) {//获取值\n        v = 1;//修改值\n    }\n    ...\n}\n```\n\n其中的  `auto [k, v]`就是结构化绑定，通过结构化绑定，我们可以很方便地获取 `map`对应的值。\n\n除去 `map`之外，还可以应用于 `pair`,`tuple`，结构体和数组，如果加上引用，还可以修改对象的值。\n\n还有就是，可以实现自定义类的结构化绑定以及结构化绑定不能应用于constexpr（据说c++20可以），我不懂就简单提一下。\n\n#### if-switch 语句初始化\n\n举个例子，c++17前，\n\n```c++\nint a = getValue();\nif (a > 10) {\n    //to something\n}\n\nswitch(a) {\n    case 1:\n    default:\n}\n```\n\nc++17后。\n\n```c++\nif (int a = getValue();a > 10) {\n    //to something\n}\n\nswitch(int a = getValue();a) {\n    case 1:\n    default:\n}\n```\n\n#### 内联变量\n\n 在头文件里定义一个内联的变量或者对象，如果这个定义被多个编译单元使用，那么他们都指向同一个唯一的对象。\n\n```c++\n//header file\nclass MyClass\n{\n\tstatic inline std::string name = \"\"; // OK since C++17\n\t//...\n};\ninline MyClass myGlobalObj; // OK even if included/defined by multiple CPP files\n```\n\n引入的原因，首先是c++中，不允许在类中初始化非const静态成员；\n\n> 因为静态成员是属于类，而不属于某个对象，如果在类中初始化，会导致每个对象都包含该静态成员。\n\n其次是如果在被多个cpp引用的头文件中定义类结构之外的变量会导致这些cpp中都定义了这个变量，导致重定义变量。\n\n关于内联就可以再写一篇文章，这就是学习c++让我感到痛苦的地方，平常你轻视的地方，却蕴含着三言两语难以说清楚的门道。\n\n### Templates\n\n#### 类模版参数推导（CATD/class template argument deduction)\n\n```c++\n//before c++17\nstd::vector<FooBar<int, const char*>> obj{a, b, c}; \n//c++17\n std::vector obj{a, b, c};\n```\n\n### constexpr \n\n#### constexpr lambda表达式\n\nC++17允许lambda函数成为constexpr，如果它们满足条件，就可以在需要编译时评估的上下文中使用\n\n```C++\nconstexpr auto lambda = [](int x) { return x * 2; };\nstatic_assert(lambda(5) == 10);\n```\n\n#### 编译期if（compile-time if constexpr）\n\n`if constexpr`是编译期的判断语句\n\n```C++\n//不同输入类型转换为字符串\ntemplate <typename T>\nstd::string convert(T input) {\n    if constexpr (std::is_same_v<T, const char*> ||\n                  std::is_same_v<T, std::string>) {\n        return input;\n    } else {\n        return std::to_string(input);\n    }\n}\n```\n\n### Namespaces\n\n#### 简化的命名空间嵌套（simplified nested namespaces）\n```c++\nnamespace A {\n    namespace B {\n        namespace C {\n            void func();\n        }\n    }\n}\n\n// c++17，更方便更舒适\nnamespace A::B::C {\n    void func();)\n}\n```\n\n### __has_include预处理表达式\n\n用来判断是否有某个头文件，代码可能在不同编译器下工作，不同编译器的可用头文件有可能不同。\n\n### 新增Attribute\n\n首先  `Attribute`是一个关键字，用于指定一个函数、变量、类、模板或类型 trait 应该具有的特殊行为。\n\n#### [[fallthrough]]\n\n通常在使用 switch 语句时，如果case 后没有加break，编译器就会发出警告信息，在case处理部分添加这个属性，用于消除这个警告信息，表示这部分逻辑本意如此。此外该属性只能用在 switch 语句中。\n\n```c++\nswitch (i) {}\n    case 1:\n        xxx; // warning\n    case 2:\n        xxx; \n        [[fallthrough]];// 警告消除\n    case 3:\n        xxx;\n       break;\n}\n```\n\n#### [[nodiscard]]\n\n被此属性修饰的函数，其返回值不应该被丢弃，如果被丢弃编译器就会发出警告信息；如果是修饰的枚举或者类，那么在对应函数返回该类型的时候也不应该丢弃结果。\n\n```c++\n[[nodiscard]] int func();\nvoid F() {\n    func(); // warning 没有处理函数返回值\n}\n```\n\n#### [[maybe_unused]]\n\n通常如果声明了一个变量但是从来没有使用过，编译器就会发出警告信息，使用该属性之后，编译器就会认为是故意为之，从而不再发出警告。需要注意，这个声明不会影响编译器的优化逻辑，在编译优化阶段，无用的变量还是会被处理掉。\n\n### lambda通过*this捕获对象副本（lambda capture of *this）\n\n正常情况下，lambda捕获了this指针，如果this指向的对象析构了，而函数再被调用且访问了成员变量，就会有问题，结果往往是崩溃。\n\n这个新特性让你捕获*this，持有了对象的拷贝，从而避免了上述问题。\n\n```c++\nstruct A {\n    int a;\n    void func() {\n        auto f = [*this] { // 这里\n            cout << a << endl;\n        };\n        f();\n    }  \n};\n```\n\n## New library features\n\n### Utility types\n+ std::any适用于之前使用void*作为通用类型的场景。\n+ std::optional适用于之前使用nullptr代表失败状态的场景。\n+ std::variant适用于之前使用union的场景。\n#### std::any\n\n可以存储任意类型的单个值\n\n```c++\nint main() {\n    std::any a = std::make_any<int>(1);//使用std::make_any创建对象\n    cout << a.type().name() << \" \" << std::any_cast<int>(a) << endl;//使用std::any_cast获取值\n    a = 2.2f;\n    cout << a.type().name() << \" \" << std::any_cast<float>(a) << endl;\n    if (a.has_value()) {//使用has_value（）判断是否有值\n        cout << a.type().name();\n    }\n    a.reset();//销毁所含对象\n    if (a.has_value()) {\n        cout << a.type().name();//type()查询所含的类型，返回typeid\n    }\n    a = emplace<std::string>(\"a\");//使用emplace会销毁之前的对象，构造新的对象\n    return 0;\n}\n```\n\n#### std::optional\n\n见名知意，表示一个值可能存在，没有值就是默认的 std::nullopt\n\n```c++\nstd::optional<int> divide(int a, int b) {\n    if (b == 0) {\n        return std::nullopt;\n    } else {\n        return a / b;\n    }\n}\n```\n\n对 `std::optional`对象使用 `has_valut()`来判断是否有值，使用 `*`或者`value()`来取值\n\n#### std::variant\n类型安全的联合体（可以称之为变化体），功能上与union类似，但是更加高级。\n+ 类型安全，由于存储了内部的类型信息，所有可以进行安全的类型转换\n+ 可以存储复杂类型，union只能存储POD类型（Plain Old Date）\n### Memory management\n\n#### 共享指针支持动态数组（array support for std::shared_ptr）\n\n```C++\nstd::shared_ptr<uint8_t[]> sp(new uint8_t[extraDataLength_], [](uint8_t* ptr) { delete[] ptr; });\n```\n\n### Compile-time programming(to-do)\n\n### Algorithms\n\n#### 并行算法\n\nc++17支持STL并行执行，简单提一下，以std::sort为例\n\n```C++\nstd::sort(exe_policy, begin, end, comp);\n```\n\n可以添加如下三种的执行策略\n\n+ `std::execution::seq`（顺序执行）\n+ `std::execution::par`（并行执行）\n+ `std::execution::par_unseq`（并行和向量化执行）\n\n### Iterators and containers\n\n#### std::map/unordered_map [`try_emplace`](https://en.cppreference.com/w/cpp/container/map/try_emplace)\n\n向`std::map/unordered_map`中插入元素往往使用`emplace`,其操作是如果元素不存在就会插入元素，否则不插入，但是如果元素已经存在，此时仍会构造一次待插入的元素，在判断不需要插入后将该元素立刻析构，所以产生了额外的开销， `try_emplace`就避免了这种问题。\n\n### Others\n\n#### std::string_view\n\n通常我们传递一个string时会触发对象的拷贝操作，大字符串的拷贝赋值操作会触发堆内存分配，很影响运行效率，有了string_view就可以避免拷贝操作，平时传递过程中传递string_view即可。\n\n```c++\nvoid func(std::string_view stv) { cout << stv << endl; }\n\nint main(void) {\n    std::string str = \"Hello World\";\n    std::cout << str << std::endl;\n\n    std::string_view stv(str.c_str(), str.size());\n    cout << stv << endl;\n    func(stv);\n    return 0;\n}\n```\n\n#### std::shared_mutex\n\n\n\n\n\n","slug":"C-17","published":1,"updated":"2024-05-20T08:36:02.565Z","comments":1,"layout":"post","photos":[],"_id":"clwg373ee0000bnpzeip0btt7","content":"<p>归纳总结一些常见的（我见过的）或比较好理解的（我能理解的）C++17的特性，具体的全部特性参考链接<a href=\"https://en.cppreference.com/w/cpp/17\">C++17 - cppreference.com</a>。</p>\n<h2 id=\"New-language-features\"><a href=\"#New-language-features\" class=\"headerlink\" title=\"New language features\"></a>New language features</h2><h3 id=\"Variables\"><a href=\"#Variables\" class=\"headerlink\" title=\"Variables\"></a>Variables</h3><h4 id=\"结构化绑定\"><a href=\"#结构化绑定\" class=\"headerlink\" title=\"结构化绑定\"></a>结构化绑定</h4><p>首先先举一个例子，在leetcode刷题看题解经常会遇到这种写法。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unordered_map&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt; mp;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;[k , v] : mp) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (k == <span class=\"number\">1</span>) &#123;<span class=\"comment\">//获取值</span></span><br><span class=\"line\">        v = <span class=\"number\">1</span>;<span class=\"comment\">//修改值</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其中的  <code>auto [k, v]</code>就是结构化绑定，通过结构化绑定，我们可以很方便地获取 <code>map</code>对应的值。</p>\n<p>除去 <code>map</code>之外，还可以应用于 <code>pair</code>,<code>tuple</code>，结构体和数组，如果加上引用，还可以修改对象的值。</p>\n<p>还有就是，可以实现自定义类的结构化绑定以及结构化绑定不能应用于constexpr（据说c++20可以），我不懂就简单提一下。</p>\n<h4 id=\"if-switch-语句初始化\"><a href=\"#if-switch-语句初始化\" class=\"headerlink\" title=\"if-switch 语句初始化\"></a>if-switch 语句初始化</h4><p>举个例子，c++17前，</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> a = <span class=\"built_in\">getValue</span>();</span><br><span class=\"line\"><span class=\"keyword\">if</span> (a &gt; <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//to something</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">switch</span>(a) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>c++17后。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"type\">int</span> a = <span class=\"built_in\">getValue</span>();a &gt; <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//to something</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">switch</span>(<span class=\"type\">int</span> a = <span class=\"built_in\">getValue</span>();a) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"内联变量\"><a href=\"#内联变量\" class=\"headerlink\" title=\"内联变量\"></a>内联变量</h4><p> 在头文件里定义一个内联的变量或者对象，如果这个定义被多个编译单元使用，那么他们都指向同一个唯一的对象。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//header file</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyClass</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">static</span> <span class=\"keyword\">inline</span> std::string name = <span class=\"string\">&quot;&quot;</span>; <span class=\"comment\">// OK since C++17</span></span><br><span class=\"line\">\t<span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">inline</span> MyClass myGlobalObj; <span class=\"comment\">// OK even if included/defined by multiple CPP files</span></span><br></pre></td></tr></table></figure>\n\n<p>引入的原因，首先是c++中，不允许在类中初始化非const静态成员；</p>\n<blockquote>\n<p>因为静态成员是属于类，而不属于某个对象，如果在类中初始化，会导致每个对象都包含该静态成员。</p>\n</blockquote>\n<p>其次是如果在被多个cpp引用的头文件中定义类结构之外的变量会导致这些cpp中都定义了这个变量，导致重定义变量。</p>\n<p>关于内联就可以再写一篇文章，这就是学习c++让我感到痛苦的地方，平常你轻视的地方，却蕴含着三言两语难以说清楚的门道。</p>\n<h3 id=\"Templates\"><a href=\"#Templates\" class=\"headerlink\" title=\"Templates\"></a>Templates</h3><h4 id=\"类模版参数推导（CATD-class-template-argument-deduction\"><a href=\"#类模版参数推导（CATD-class-template-argument-deduction\" class=\"headerlink\" title=\"类模版参数推导（CATD&#x2F;class template argument deduction)\"></a>类模版参数推导（CATD&#x2F;class template argument deduction)</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//before c++17</span></span><br><span class=\"line\">std::vector&lt;FooBar&lt;<span class=\"type\">int</span>, <span class=\"type\">const</span> <span class=\"type\">char</span>*&gt;&gt; obj&#123;a, b, c&#125;; </span><br><span class=\"line\"><span class=\"comment\">//c++17</span></span><br><span class=\"line\"> std::vector obj&#123;a, b, c&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"constexpr\"><a href=\"#constexpr\" class=\"headerlink\" title=\"constexpr\"></a>constexpr</h3><h4 id=\"constexpr-lambda表达式\"><a href=\"#constexpr-lambda表达式\" class=\"headerlink\" title=\"constexpr lambda表达式\"></a>constexpr lambda表达式</h4><p>C++17允许lambda函数成为constexpr，如果它们满足条件，就可以在需要编译时评估的上下文中使用</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">constexpr</span> <span class=\"keyword\">auto</span> lambda = [](<span class=\"type\">int</span> x) &#123; <span class=\"keyword\">return</span> x * <span class=\"number\">2</span>; &#125;;</span><br><span class=\"line\"><span class=\"built_in\">static_assert</span>(<span class=\"built_in\">lambda</span>(<span class=\"number\">5</span>) == <span class=\"number\">10</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"编译期if（compile-time-if-constexpr）\"><a href=\"#编译期if（compile-time-if-constexpr）\" class=\"headerlink\" title=\"编译期if（compile-time if constexpr）\"></a>编译期if（compile-time if constexpr）</h4><p><code>if constexpr</code>是编译期的判断语句</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//不同输入类型转换为字符串</span></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"function\">std::string <span class=\"title\">convert</span><span class=\"params\">(T input)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">if</span> <span class=\"title\">constexpr</span> <span class=\"params\">(std::is_same_v&lt;T, <span class=\"type\">const</span> <span class=\"type\">char</span>*&gt; ||</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                  std::is_same_v&lt;T, std::string&gt;)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> input;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> std::<span class=\"built_in\">to_string</span>(input);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Namespaces\"><a href=\"#Namespaces\" class=\"headerlink\" title=\"Namespaces\"></a>Namespaces</h3><h4 id=\"简化的命名空间嵌套（simplified-nested-namespaces）\"><a href=\"#简化的命名空间嵌套（simplified-nested-namespaces）\" class=\"headerlink\" title=\"简化的命名空间嵌套（simplified nested namespaces）\"></a>简化的命名空间嵌套（simplified nested namespaces）</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> A &#123;</span><br><span class=\"line\">    <span class=\"keyword\">namespace</span> B &#123;</span><br><span class=\"line\">        <span class=\"keyword\">namespace</span> C &#123;</span><br><span class=\"line\">            <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">func</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// c++17，更方便更舒适</span></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> A::B::C &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">func</span><span class=\"params\">()</span></span>;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"has-include预处理表达式\"><a href=\"#has-include预处理表达式\" class=\"headerlink\" title=\"__has_include预处理表达式\"></a>__has_include预处理表达式</h3><p>用来判断是否有某个头文件，代码可能在不同编译器下工作，不同编译器的可用头文件有可能不同。</p>\n<h3 id=\"新增Attribute\"><a href=\"#新增Attribute\" class=\"headerlink\" title=\"新增Attribute\"></a>新增Attribute</h3><p>首先  <code>Attribute</code>是一个关键字，用于指定一个函数、变量、类、模板或类型 trait 应该具有的特殊行为。</p>\n<h4 id=\"fallthrough\"><a href=\"#fallthrough\" class=\"headerlink\" title=\"[[fallthrough]]\"></a>[[fallthrough]]</h4><p>通常在使用 switch 语句时，如果case 后没有加break，编译器就会发出警告信息，在case处理部分添加这个属性，用于消除这个警告信息，表示这部分逻辑本意如此。此外该属性只能用在 switch 语句中。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">switch</span> (i) &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">        xxx; <span class=\"comment\">// warning</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">        xxx; </span><br><span class=\"line\">        [[fallthrough]];<span class=\"comment\">// 警告消除</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">        xxx;</span><br><span class=\"line\">       <span class=\"keyword\">break</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"nodiscard\"><a href=\"#nodiscard\" class=\"headerlink\" title=\"[[nodiscard]]\"></a>[[nodiscard]]</h4><p>被此属性修饰的函数，其返回值不应该被丢弃，如果被丢弃编译器就会发出警告信息；如果是修饰的枚举或者类，那么在对应函数返回该类型的时候也不应该丢弃结果。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[[nodiscard]] <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">func</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">F</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">func</span>(); <span class=\"comment\">// warning 没有处理函数返回值</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"maybe-unused\"><a href=\"#maybe-unused\" class=\"headerlink\" title=\"[[maybe_unused]]\"></a>[[maybe_unused]]</h4><p>通常如果声明了一个变量但是从来没有使用过，编译器就会发出警告信息，使用该属性之后，编译器就会认为是故意为之，从而不再发出警告。需要注意，这个声明不会影响编译器的优化逻辑，在编译优化阶段，无用的变量还是会被处理掉。</p>\n<h3 id=\"lambda通过-this捕获对象副本（lambda-capture-of-this）\"><a href=\"#lambda通过-this捕获对象副本（lambda-capture-of-this）\" class=\"headerlink\" title=\"lambda通过*this捕获对象副本（lambda capture of *this）\"></a>lambda通过*this捕获对象副本（lambda capture of *this）</h3><p>正常情况下，lambda捕获了this指针，如果this指向的对象析构了，而函数再被调用且访问了成员变量，就会有问题，结果往往是崩溃。</p>\n<p>这个新特性让你捕获*this，持有了对象的拷贝，从而避免了上述问题。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> a;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">func</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> f = [*<span class=\"keyword\">this</span>] &#123; <span class=\"comment\">// 这里</span></span><br><span class=\"line\">            cout &lt;&lt; a &lt;&lt; endl;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"built_in\">f</span>();</span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"New-library-features\"><a href=\"#New-library-features\" class=\"headerlink\" title=\"New library features\"></a>New library features</h2><h3 id=\"Utility-types\"><a href=\"#Utility-types\" class=\"headerlink\" title=\"Utility types\"></a>Utility types</h3><ul>\n<li>std::any适用于之前使用void*作为通用类型的场景。</li>\n<li>std::optional适用于之前使用nullptr代表失败状态的场景。</li>\n<li>std::variant适用于之前使用union的场景。</li>\n</ul>\n<h4 id=\"std-any\"><a href=\"#std-any\" class=\"headerlink\" title=\"std::any\"></a>std::any</h4><p>可以存储任意类型的单个值</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    std::any a = std::<span class=\"built_in\">make_any</span>&lt;<span class=\"type\">int</span>&gt;(<span class=\"number\">1</span>);<span class=\"comment\">//使用std::make_any创建对象</span></span><br><span class=\"line\">    cout &lt;&lt; a.<span class=\"built_in\">type</span>().<span class=\"built_in\">name</span>() &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; std::<span class=\"built_in\">any_cast</span>&lt;<span class=\"type\">int</span>&gt;(a) &lt;&lt; endl;<span class=\"comment\">//使用std::any_cast获取值</span></span><br><span class=\"line\">    a = <span class=\"number\">2.2f</span>;</span><br><span class=\"line\">    cout &lt;&lt; a.<span class=\"built_in\">type</span>().<span class=\"built_in\">name</span>() &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; std::<span class=\"built_in\">any_cast</span>&lt;<span class=\"type\">float</span>&gt;(a) &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (a.<span class=\"built_in\">has_value</span>()) &#123;<span class=\"comment\">//使用has_value（）判断是否有值</span></span><br><span class=\"line\">        cout &lt;&lt; a.<span class=\"built_in\">type</span>().<span class=\"built_in\">name</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    a.<span class=\"built_in\">reset</span>();<span class=\"comment\">//销毁所含对象</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (a.<span class=\"built_in\">has_value</span>()) &#123;</span><br><span class=\"line\">        cout &lt;&lt; a.<span class=\"built_in\">type</span>().<span class=\"built_in\">name</span>();<span class=\"comment\">//type()查询所含的类型，返回typeid</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    a = <span class=\"built_in\">emplace</span>&lt;std::string&gt;(<span class=\"string\">&quot;a&quot;</span>);<span class=\"comment\">//使用emplace会销毁之前的对象，构造新的对象</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"std-optional\"><a href=\"#std-optional\" class=\"headerlink\" title=\"std::optional\"></a>std::optional</h4><p>见名知意，表示一个值可能存在，没有值就是默认的 std::nullopt</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">std::optional&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">divide</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (b == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> std::<span class=\"literal\">nullopt</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a / b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>对 <code>std::optional</code>对象使用 <code>has_valut()</code>来判断是否有值，使用 <code>*</code>或者<code>value()</code>来取值</p>\n<h4 id=\"std-variant\"><a href=\"#std-variant\" class=\"headerlink\" title=\"std::variant\"></a>std::variant</h4><p>类型安全的联合体（可以称之为变化体），功能上与union类似，但是更加高级。</p>\n<ul>\n<li>类型安全，由于存储了内部的类型信息，所有可以进行安全的类型转换</li>\n<li>可以存储复杂类型，union只能存储POD类型（Plain Old Date）</li>\n</ul>\n<h3 id=\"Memory-management\"><a href=\"#Memory-management\" class=\"headerlink\" title=\"Memory management\"></a>Memory management</h3><h4 id=\"共享指针支持动态数组（array-support-for-std-shared-ptr）\"><a href=\"#共享指针支持动态数组（array-support-for-std-shared-ptr）\" class=\"headerlink\" title=\"共享指针支持动态数组（array support for std::shared_ptr）\"></a>共享指针支持动态数组（array support for std::shared_ptr）</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">std::shared_ptr&lt;<span class=\"type\">uint8_t</span>[]&gt; <span class=\"title\">sp</span><span class=\"params\">(<span class=\"keyword\">new</span> <span class=\"type\">uint8_t</span>[extraDataLength_], [](<span class=\"type\">uint8_t</span>* ptr) &#123; <span class=\"keyword\">delete</span>[] ptr; &#125;)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Compile-time-programming-to-do\"><a href=\"#Compile-time-programming-to-do\" class=\"headerlink\" title=\"Compile-time programming(to-do)\"></a>Compile-time programming(to-do)</h3><h3 id=\"Algorithms\"><a href=\"#Algorithms\" class=\"headerlink\" title=\"Algorithms\"></a>Algorithms</h3><h4 id=\"并行算法\"><a href=\"#并行算法\" class=\"headerlink\" title=\"并行算法\"></a>并行算法</h4><p>c++17支持STL并行执行，简单提一下，以std::sort为例</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">std::<span class=\"built_in\">sort</span>(exe_policy, begin, end, comp);</span><br></pre></td></tr></table></figure>\n\n<p>可以添加如下三种的执行策略</p>\n<ul>\n<li><code>std::execution::seq</code>（顺序执行）</li>\n<li><code>std::execution::par</code>（并行执行）</li>\n<li><code>std::execution::par_unseq</code>（并行和向量化执行）</li>\n</ul>\n<h3 id=\"Iterators-and-containers\"><a href=\"#Iterators-and-containers\" class=\"headerlink\" title=\"Iterators and containers\"></a>Iterators and containers</h3><h4 id=\"std-map-unordered-map-try-emplace\"><a href=\"#std-map-unordered-map-try-emplace\" class=\"headerlink\" title=\"std::map&#x2F;unordered_map try_emplace\"></a>std::map&#x2F;unordered_map <a href=\"https://en.cppreference.com/w/cpp/container/map/try_emplace\"><code>try_emplace</code></a></h4><p>向<code>std::map/unordered_map</code>中插入元素往往使用<code>emplace</code>,其操作是如果元素不存在就会插入元素，否则不插入，但是如果元素已经存在，此时仍会构造一次待插入的元素，在判断不需要插入后将该元素立刻析构，所以产生了额外的开销， <code>try_emplace</code>就避免了这种问题。</p>\n<h3 id=\"Others\"><a href=\"#Others\" class=\"headerlink\" title=\"Others\"></a>Others</h3><h4 id=\"std-string-view\"><a href=\"#std-string-view\" class=\"headerlink\" title=\"std::string_view\"></a>std::string_view</h4><p>通常我们传递一个string时会触发对象的拷贝操作，大字符串的拷贝赋值操作会触发堆内存分配，很影响运行效率，有了string_view就可以避免拷贝操作，平时传递过程中传递string_view即可。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">func</span><span class=\"params\">(std::string_view stv)</span> </span>&#123; cout &lt;&lt; stv &lt;&lt; endl; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">    std::string str = <span class=\"string\">&quot;Hello World&quot;</span>;</span><br><span class=\"line\">    std::cout &lt;&lt; str &lt;&lt; std::endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">std::string_view <span class=\"title\">stv</span><span class=\"params\">(str.c_str(), str.size())</span></span>;</span><br><span class=\"line\">    cout &lt;&lt; stv &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"built_in\">func</span>(stv);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"std-shared-mutex\"><a href=\"#std-shared-mutex\" class=\"headerlink\" title=\"std::shared_mutex\"></a>std::shared_mutex</h4>","length":4828,"excerpt":"","more":"<p>归纳总结一些常见的（我见过的）或比较好理解的（我能理解的）C++17的特性，具体的全部特性参考链接<a href=\"https://en.cppreference.com/w/cpp/17\">C++17 - cppreference.com</a>。</p>\n<h2 id=\"New-language-features\"><a href=\"#New-language-features\" class=\"headerlink\" title=\"New language features\"></a>New language features</h2><h3 id=\"Variables\"><a href=\"#Variables\" class=\"headerlink\" title=\"Variables\"></a>Variables</h3><h4 id=\"结构化绑定\"><a href=\"#结构化绑定\" class=\"headerlink\" title=\"结构化绑定\"></a>结构化绑定</h4><p>首先先举一个例子，在leetcode刷题看题解经常会遇到这种写法。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unordered_map&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt; mp;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;[k , v] : mp) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (k == <span class=\"number\">1</span>) &#123;<span class=\"comment\">//获取值</span></span><br><span class=\"line\">        v = <span class=\"number\">1</span>;<span class=\"comment\">//修改值</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其中的  <code>auto [k, v]</code>就是结构化绑定，通过结构化绑定，我们可以很方便地获取 <code>map</code>对应的值。</p>\n<p>除去 <code>map</code>之外，还可以应用于 <code>pair</code>,<code>tuple</code>，结构体和数组，如果加上引用，还可以修改对象的值。</p>\n<p>还有就是，可以实现自定义类的结构化绑定以及结构化绑定不能应用于constexpr（据说c++20可以），我不懂就简单提一下。</p>\n<h4 id=\"if-switch-语句初始化\"><a href=\"#if-switch-语句初始化\" class=\"headerlink\" title=\"if-switch 语句初始化\"></a>if-switch 语句初始化</h4><p>举个例子，c++17前，</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> a = <span class=\"built_in\">getValue</span>();</span><br><span class=\"line\"><span class=\"keyword\">if</span> (a &gt; <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//to something</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">switch</span>(a) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>c++17后。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"type\">int</span> a = <span class=\"built_in\">getValue</span>();a &gt; <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//to something</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">switch</span>(<span class=\"type\">int</span> a = <span class=\"built_in\">getValue</span>();a) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"内联变量\"><a href=\"#内联变量\" class=\"headerlink\" title=\"内联变量\"></a>内联变量</h4><p> 在头文件里定义一个内联的变量或者对象，如果这个定义被多个编译单元使用，那么他们都指向同一个唯一的对象。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//header file</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyClass</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">static</span> <span class=\"keyword\">inline</span> std::string name = <span class=\"string\">&quot;&quot;</span>; <span class=\"comment\">// OK since C++17</span></span><br><span class=\"line\">\t<span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">inline</span> MyClass myGlobalObj; <span class=\"comment\">// OK even if included/defined by multiple CPP files</span></span><br></pre></td></tr></table></figure>\n\n<p>引入的原因，首先是c++中，不允许在类中初始化非const静态成员；</p>\n<blockquote>\n<p>因为静态成员是属于类，而不属于某个对象，如果在类中初始化，会导致每个对象都包含该静态成员。</p>\n</blockquote>\n<p>其次是如果在被多个cpp引用的头文件中定义类结构之外的变量会导致这些cpp中都定义了这个变量，导致重定义变量。</p>\n<p>关于内联就可以再写一篇文章，这就是学习c++让我感到痛苦的地方，平常你轻视的地方，却蕴含着三言两语难以说清楚的门道。</p>\n<h3 id=\"Templates\"><a href=\"#Templates\" class=\"headerlink\" title=\"Templates\"></a>Templates</h3><h4 id=\"类模版参数推导（CATD-class-template-argument-deduction\"><a href=\"#类模版参数推导（CATD-class-template-argument-deduction\" class=\"headerlink\" title=\"类模版参数推导（CATD&#x2F;class template argument deduction)\"></a>类模版参数推导（CATD&#x2F;class template argument deduction)</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//before c++17</span></span><br><span class=\"line\">std::vector&lt;FooBar&lt;<span class=\"type\">int</span>, <span class=\"type\">const</span> <span class=\"type\">char</span>*&gt;&gt; obj&#123;a, b, c&#125;; </span><br><span class=\"line\"><span class=\"comment\">//c++17</span></span><br><span class=\"line\"> std::vector obj&#123;a, b, c&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"constexpr\"><a href=\"#constexpr\" class=\"headerlink\" title=\"constexpr\"></a>constexpr</h3><h4 id=\"constexpr-lambda表达式\"><a href=\"#constexpr-lambda表达式\" class=\"headerlink\" title=\"constexpr lambda表达式\"></a>constexpr lambda表达式</h4><p>C++17允许lambda函数成为constexpr，如果它们满足条件，就可以在需要编译时评估的上下文中使用</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">constexpr</span> <span class=\"keyword\">auto</span> lambda = [](<span class=\"type\">int</span> x) &#123; <span class=\"keyword\">return</span> x * <span class=\"number\">2</span>; &#125;;</span><br><span class=\"line\"><span class=\"built_in\">static_assert</span>(<span class=\"built_in\">lambda</span>(<span class=\"number\">5</span>) == <span class=\"number\">10</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"编译期if（compile-time-if-constexpr）\"><a href=\"#编译期if（compile-time-if-constexpr）\" class=\"headerlink\" title=\"编译期if（compile-time if constexpr）\"></a>编译期if（compile-time if constexpr）</h4><p><code>if constexpr</code>是编译期的判断语句</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//不同输入类型转换为字符串</span></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"function\">std::string <span class=\"title\">convert</span><span class=\"params\">(T input)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">if</span> <span class=\"title\">constexpr</span> <span class=\"params\">(std::is_same_v&lt;T, <span class=\"type\">const</span> <span class=\"type\">char</span>*&gt; ||</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                  std::is_same_v&lt;T, std::string&gt;)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> input;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> std::<span class=\"built_in\">to_string</span>(input);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Namespaces\"><a href=\"#Namespaces\" class=\"headerlink\" title=\"Namespaces\"></a>Namespaces</h3><h4 id=\"简化的命名空间嵌套（simplified-nested-namespaces）\"><a href=\"#简化的命名空间嵌套（simplified-nested-namespaces）\" class=\"headerlink\" title=\"简化的命名空间嵌套（simplified nested namespaces）\"></a>简化的命名空间嵌套（simplified nested namespaces）</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> A &#123;</span><br><span class=\"line\">    <span class=\"keyword\">namespace</span> B &#123;</span><br><span class=\"line\">        <span class=\"keyword\">namespace</span> C &#123;</span><br><span class=\"line\">            <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">func</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// c++17，更方便更舒适</span></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> A::B::C &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">func</span><span class=\"params\">()</span></span>;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"has-include预处理表达式\"><a href=\"#has-include预处理表达式\" class=\"headerlink\" title=\"__has_include预处理表达式\"></a>__has_include预处理表达式</h3><p>用来判断是否有某个头文件，代码可能在不同编译器下工作，不同编译器的可用头文件有可能不同。</p>\n<h3 id=\"新增Attribute\"><a href=\"#新增Attribute\" class=\"headerlink\" title=\"新增Attribute\"></a>新增Attribute</h3><p>首先  <code>Attribute</code>是一个关键字，用于指定一个函数、变量、类、模板或类型 trait 应该具有的特殊行为。</p>\n<h4 id=\"fallthrough\"><a href=\"#fallthrough\" class=\"headerlink\" title=\"[[fallthrough]]\"></a>[[fallthrough]]</h4><p>通常在使用 switch 语句时，如果case 后没有加break，编译器就会发出警告信息，在case处理部分添加这个属性，用于消除这个警告信息，表示这部分逻辑本意如此。此外该属性只能用在 switch 语句中。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">switch</span> (i) &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">        xxx; <span class=\"comment\">// warning</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">        xxx; </span><br><span class=\"line\">        [[fallthrough]];<span class=\"comment\">// 警告消除</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">        xxx;</span><br><span class=\"line\">       <span class=\"keyword\">break</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"nodiscard\"><a href=\"#nodiscard\" class=\"headerlink\" title=\"[[nodiscard]]\"></a>[[nodiscard]]</h4><p>被此属性修饰的函数，其返回值不应该被丢弃，如果被丢弃编译器就会发出警告信息；如果是修饰的枚举或者类，那么在对应函数返回该类型的时候也不应该丢弃结果。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[[nodiscard]] <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">func</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">F</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">func</span>(); <span class=\"comment\">// warning 没有处理函数返回值</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"maybe-unused\"><a href=\"#maybe-unused\" class=\"headerlink\" title=\"[[maybe_unused]]\"></a>[[maybe_unused]]</h4><p>通常如果声明了一个变量但是从来没有使用过，编译器就会发出警告信息，使用该属性之后，编译器就会认为是故意为之，从而不再发出警告。需要注意，这个声明不会影响编译器的优化逻辑，在编译优化阶段，无用的变量还是会被处理掉。</p>\n<h3 id=\"lambda通过-this捕获对象副本（lambda-capture-of-this）\"><a href=\"#lambda通过-this捕获对象副本（lambda-capture-of-this）\" class=\"headerlink\" title=\"lambda通过*this捕获对象副本（lambda capture of *this）\"></a>lambda通过*this捕获对象副本（lambda capture of *this）</h3><p>正常情况下，lambda捕获了this指针，如果this指向的对象析构了，而函数再被调用且访问了成员变量，就会有问题，结果往往是崩溃。</p>\n<p>这个新特性让你捕获*this，持有了对象的拷贝，从而避免了上述问题。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> a;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">func</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> f = [*<span class=\"keyword\">this</span>] &#123; <span class=\"comment\">// 这里</span></span><br><span class=\"line\">            cout &lt;&lt; a &lt;&lt; endl;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"built_in\">f</span>();</span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"New-library-features\"><a href=\"#New-library-features\" class=\"headerlink\" title=\"New library features\"></a>New library features</h2><h3 id=\"Utility-types\"><a href=\"#Utility-types\" class=\"headerlink\" title=\"Utility types\"></a>Utility types</h3><ul>\n<li>std::any适用于之前使用void*作为通用类型的场景。</li>\n<li>std::optional适用于之前使用nullptr代表失败状态的场景。</li>\n<li>std::variant适用于之前使用union的场景。</li>\n</ul>\n<h4 id=\"std-any\"><a href=\"#std-any\" class=\"headerlink\" title=\"std::any\"></a>std::any</h4><p>可以存储任意类型的单个值</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    std::any a = std::<span class=\"built_in\">make_any</span>&lt;<span class=\"type\">int</span>&gt;(<span class=\"number\">1</span>);<span class=\"comment\">//使用std::make_any创建对象</span></span><br><span class=\"line\">    cout &lt;&lt; a.<span class=\"built_in\">type</span>().<span class=\"built_in\">name</span>() &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; std::<span class=\"built_in\">any_cast</span>&lt;<span class=\"type\">int</span>&gt;(a) &lt;&lt; endl;<span class=\"comment\">//使用std::any_cast获取值</span></span><br><span class=\"line\">    a = <span class=\"number\">2.2f</span>;</span><br><span class=\"line\">    cout &lt;&lt; a.<span class=\"built_in\">type</span>().<span class=\"built_in\">name</span>() &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; std::<span class=\"built_in\">any_cast</span>&lt;<span class=\"type\">float</span>&gt;(a) &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (a.<span class=\"built_in\">has_value</span>()) &#123;<span class=\"comment\">//使用has_value（）判断是否有值</span></span><br><span class=\"line\">        cout &lt;&lt; a.<span class=\"built_in\">type</span>().<span class=\"built_in\">name</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    a.<span class=\"built_in\">reset</span>();<span class=\"comment\">//销毁所含对象</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (a.<span class=\"built_in\">has_value</span>()) &#123;</span><br><span class=\"line\">        cout &lt;&lt; a.<span class=\"built_in\">type</span>().<span class=\"built_in\">name</span>();<span class=\"comment\">//type()查询所含的类型，返回typeid</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    a = <span class=\"built_in\">emplace</span>&lt;std::string&gt;(<span class=\"string\">&quot;a&quot;</span>);<span class=\"comment\">//使用emplace会销毁之前的对象，构造新的对象</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"std-optional\"><a href=\"#std-optional\" class=\"headerlink\" title=\"std::optional\"></a>std::optional</h4><p>见名知意，表示一个值可能存在，没有值就是默认的 std::nullopt</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">std::optional&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">divide</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (b == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> std::<span class=\"literal\">nullopt</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a / b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>对 <code>std::optional</code>对象使用 <code>has_valut()</code>来判断是否有值，使用 <code>*</code>或者<code>value()</code>来取值</p>\n<h4 id=\"std-variant\"><a href=\"#std-variant\" class=\"headerlink\" title=\"std::variant\"></a>std::variant</h4><p>类型安全的联合体（可以称之为变化体），功能上与union类似，但是更加高级。</p>\n<ul>\n<li>类型安全，由于存储了内部的类型信息，所有可以进行安全的类型转换</li>\n<li>可以存储复杂类型，union只能存储POD类型（Plain Old Date）</li>\n</ul>\n<h3 id=\"Memory-management\"><a href=\"#Memory-management\" class=\"headerlink\" title=\"Memory management\"></a>Memory management</h3><h4 id=\"共享指针支持动态数组（array-support-for-std-shared-ptr）\"><a href=\"#共享指针支持动态数组（array-support-for-std-shared-ptr）\" class=\"headerlink\" title=\"共享指针支持动态数组（array support for std::shared_ptr）\"></a>共享指针支持动态数组（array support for std::shared_ptr）</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">std::shared_ptr&lt;<span class=\"type\">uint8_t</span>[]&gt; <span class=\"title\">sp</span><span class=\"params\">(<span class=\"keyword\">new</span> <span class=\"type\">uint8_t</span>[extraDataLength_], [](<span class=\"type\">uint8_t</span>* ptr) &#123; <span class=\"keyword\">delete</span>[] ptr; &#125;)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Compile-time-programming-to-do\"><a href=\"#Compile-time-programming-to-do\" class=\"headerlink\" title=\"Compile-time programming(to-do)\"></a>Compile-time programming(to-do)</h3><h3 id=\"Algorithms\"><a href=\"#Algorithms\" class=\"headerlink\" title=\"Algorithms\"></a>Algorithms</h3><h4 id=\"并行算法\"><a href=\"#并行算法\" class=\"headerlink\" title=\"并行算法\"></a>并行算法</h4><p>c++17支持STL并行执行，简单提一下，以std::sort为例</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">std::<span class=\"built_in\">sort</span>(exe_policy, begin, end, comp);</span><br></pre></td></tr></table></figure>\n\n<p>可以添加如下三种的执行策略</p>\n<ul>\n<li><code>std::execution::seq</code>（顺序执行）</li>\n<li><code>std::execution::par</code>（并行执行）</li>\n<li><code>std::execution::par_unseq</code>（并行和向量化执行）</li>\n</ul>\n<h3 id=\"Iterators-and-containers\"><a href=\"#Iterators-and-containers\" class=\"headerlink\" title=\"Iterators and containers\"></a>Iterators and containers</h3><h4 id=\"std-map-unordered-map-try-emplace\"><a href=\"#std-map-unordered-map-try-emplace\" class=\"headerlink\" title=\"std::map&#x2F;unordered_map try_emplace\"></a>std::map&#x2F;unordered_map <a href=\"https://en.cppreference.com/w/cpp/container/map/try_emplace\"><code>try_emplace</code></a></h4><p>向<code>std::map/unordered_map</code>中插入元素往往使用<code>emplace</code>,其操作是如果元素不存在就会插入元素，否则不插入，但是如果元素已经存在，此时仍会构造一次待插入的元素，在判断不需要插入后将该元素立刻析构，所以产生了额外的开销， <code>try_emplace</code>就避免了这种问题。</p>\n<h3 id=\"Others\"><a href=\"#Others\" class=\"headerlink\" title=\"Others\"></a>Others</h3><h4 id=\"std-string-view\"><a href=\"#std-string-view\" class=\"headerlink\" title=\"std::string_view\"></a>std::string_view</h4><p>通常我们传递一个string时会触发对象的拷贝操作，大字符串的拷贝赋值操作会触发堆内存分配，很影响运行效率，有了string_view就可以避免拷贝操作，平时传递过程中传递string_view即可。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">func</span><span class=\"params\">(std::string_view stv)</span> </span>&#123; cout &lt;&lt; stv &lt;&lt; endl; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">    std::string str = <span class=\"string\">&quot;Hello World&quot;</span>;</span><br><span class=\"line\">    std::cout &lt;&lt; str &lt;&lt; std::endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">std::string_view <span class=\"title\">stv</span><span class=\"params\">(str.c_str(), str.size())</span></span>;</span><br><span class=\"line\">    cout &lt;&lt; stv &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"built_in\">func</span>(stv);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"std-shared-mutex\"><a href=\"#std-shared-mutex\" class=\"headerlink\" title=\"std::shared_mutex\"></a>std::shared_mutex</h4>"},{"title":"C++11新特性","date":"2024-05-21T08:53:57.000Z","_content":"\nc++11相比c++17就比较熟悉了，原因当然是实践的比较多，自然就熟悉了。本文还是介绍我比较熟悉和比较简单的特性，太过熟悉的，比如nullptr，我不会讲也没有讲的必要，全部特性参照[C++11 - cppreference.com](https://en.cppreference.com/w/cpp/11)。\n\n## Core language features\n\n### auto & decltype\n\n+ auto：让编译器在编译期就推导出变量的类型。\n\n  很好用的关键字，但是不能滥用，否则会影响代码可读性，比如int，double这种简单类型就不要使用，一些不关心其具体类型的变量（比如lambda表达式）或者复杂类型就使用auto。\n\n+ decltype：编译器推导表达式的类型。\n\n> 具体的推导规则看了就忘实在记不住。\n\n### default & delete & final & override & explicit\n\n+ default ： 使用默认的函数定义，只用用于特殊成员函数（构造，析构之类）。\n\n```c++\nstruct A {\n  A() = default;\n  int a;\n  A(int i) { a = i; }\n};\nint main() {\n    A a;\n    return 0;\n}\n```\n\n+ delete ：如果没有定义特殊成员函数，编译器期就会生成默认的特殊成员函数，delete可以阻止这种行为。\n\n```c++\n//禁止对象的拷贝与赋值\nstruct A {\n    A() = default;\n    A(const A&) = delete;\n    A& operator=(const A&) = delete;\n    int a;\n    A(int i) { a = i; }\n};\n\nint main() {\n    A a1;\n    A a2 = a1;  // 错误，拷贝构造函数被禁用\n    A a3;\n    a3 = a1;  // 错误，拷贝赋值操作符被禁用\n}\n```\n\n\n+ final ：用于指定虚函数不能被重写或者类不能被继承。\n\n```C++\n class ChildOfBase : public Base {\n private:\n   int dontChangeMe() const final { return 1; }\n };\n \n class BadChildOfChild : public ChildOfBase {\n   int dontChangeMe() const override;  //ERROR\n }\n```\n\n```c++\nclass DontDeriveFromMe final {\n   // ...\n };\n \n class Failure : public DontDeriveFromMe { //ERROR\n   // ...\n };\n```\n\n+ override：用于确保一个函数是虚函数且重写了基类的虚函数。\n\n```c++\nstruct Base {\n    virtual void func() {\n        cout << \"base\" << endl;\n    }\n};\n\nstruct Derived : public Base{\n    void func() override { // 确保func被重写\n        cout << \"derived\" << endl;\n    }\n\n    void fu() override { // error，基类没有fu()，不可以被重写\n        \n    }\n};\n```\n\n+ explicit：专门用来修饰构造函数，表示只能显示构造，不能被隐式转换。\n\n```c++\nstruct A {\n    explicit A(int value) {\n        cout << \"value\" << endl;\n    }\n};\n\nint main() {\n    A a = 1; // error，不可以隐式转换\n    A aa(2); // ok\n    return 0;\n}\n```\n\n### 委托构造函数 & 继承构造函数\n\n+ 委托构造函数：允许同一个类中的一个构造函数（委托构造函数）调用另一个构造函数（目标构造函数），即在委托构造函数的初始化列表调用目标构造函数，执行顺序是先目标构造函数再委托构造函数。委托构造函数可以减少代码重复，避免相同的构造逻辑写多次。\n\n```c++\nstruct A {\n    A(){}\n    A(int a) { a_ = a; }\n\n    A(int a, int b) : A(a) { b_ = b; }\n\n    A(int a, int b, int c) : A(a, b) { c_ = c; }\n\n    int a_;\n    int b_;\n    int c_;\n};\n```\n\n+ 继承构造函数：允许派生类可以使用基类的构造函数。\n\n```c++\nstruct Base {\n    Base() {}\n    Base(int a) { a_ = a; }\n\n    Base(int a, int b) : Base(a) { b_ = b; }\n\n    Base(int a, int b, int c) : Base(a, b) { c_ = c; }\n\n    int a_;\n    int b_;\n    int c_;\n};\n\nstruct Derived : Base {\n    using Base::Base;//继承构造函数\n};\n\nint main() {\n    Derived a(1, 2, 3);\n    return 0;\n}\n```\n\n### 静态断言（static_assert）\n\nc++11引入static_assert声明，用于在编译期间检查，如果第一个参数值为false，则打印message，编译失败。\n\n```c++\nstatic_assert(true/false, message);\n```\n\n### enum class\n\n新增带作用域的枚举类型,普通的枚举可以自动转换为整型，且不同的枚举可以相互比较，以至于产生潜藏的bug，而带作用域的枚举就不会有这些问题。\n\n```c++\nenum class AColor {\n    kRed,\n    kGreen,\n    kBlue\n};\nenum class BColor {\n    kWhite,\n    kBlack,\n    kYellow\n};\n\n\nint main() {\n    if (AColor::kRed == BColor::kWhite) { // 编译失败\n        cout << \"red == white\" << endl;\n    }\n    return 0;\n}\n```\n\n所以一定要使用带作用域的枚举。\n\n### thread_local\n\n顾名思义，线程本地，被`thread_local`修饰的变量具有线程周期，每一个线程都拥有其只拥有一个该变量的独立实例。\n\n### attribute\n\n+ [[noreturn]]：表明一个函数一定不会返回，注意是不会返回，而不是没有返回值\n\n+ [[carries_dependency]]：看不懂\n\n  > 允许我们将dependency跨越函数进行传递，用于避免在弱一致性模型平台上产生不必要的内存栅栏导致代码效率降低。\n\n### 列表初始化(list initialization)\n\n在变量名后加上初始化列表来进行对象的初始化\n\n```c++\nint a{123};\nstd::string s{\"test\"}\n```\n\n**std::initializer_list**是实现列表初始化的关键，它可以接受任意长度的初始化列表，可以理解为存储特定类型的数组\n\n```c++\nvoid f(std::initializer_list<double> il);\n \nvoid g(float x)\n{\n   f({1, x, 3});\n}\n \nvoid h()\n{\n   f({1, 2, 3});\n}\n```\n\n### constexpr\n\nconstexpr修饰的是真正的常量，它会在编译期间就会被计算出来，整个运行过程中都不可以被改变，constexpr可以用于修饰函数，这个函数的返回值会尽可能在编译期间被计算出来当作一个常量，但是如果编译期间此函数不能被计算出来，那它就会当作一个普通函数被处理\n\n```c++\nconstexpr int func(int i) {\n    return i + 1;\n}\n\nint main() {\n    int i = 2;\n    func(i);// 普通函数\n    func(2);// 编译期间就会被计算出来\n}\n```\n\n### lambda表达式\n\n其中func是可以当作lambda表达式的名字，作为一个函数使用，capture是捕获列表，params是参数表，opt是函数选项(mutable之类)， ret是返回值类型，func_body是函数体。\n\n```c++\nauto func = [capture] (params) opt -> ret { func_body; };\n```\n\nlambda表达式允许捕获一定范围内的变量，但是不推荐默认捕获，明确捕获的变量\n\n- []不捕获任何变量\n- [&]引用捕获，捕获外部作用域所有变量，在函数体内当作引用使用\n\n- [=]值捕获，捕获外部作用域所有变量，在函数内内有个副本使用\n- [=, &a]值捕获外部作用域所有变量，按引用捕获a变量\n\n- [a]只值捕获a变量，不捕获其它变量\n- [this]捕获当前类中的this指针\n\n## Other\n\n其他的如智能指针，左右值之类比较重要的，需要单独写一篇文章来介绍。","source":"_posts/C-11.md","raw":"---\ntitle: C++11新特性\ndate: 2024-05-21 16:53:57\ntags:\n- C++\n- C++11\n\n---\n\nc++11相比c++17就比较熟悉了，原因当然是实践的比较多，自然就熟悉了。本文还是介绍我比较熟悉和比较简单的特性，太过熟悉的，比如nullptr，我不会讲也没有讲的必要，全部特性参照[C++11 - cppreference.com](https://en.cppreference.com/w/cpp/11)。\n\n## Core language features\n\n### auto & decltype\n\n+ auto：让编译器在编译期就推导出变量的类型。\n\n  很好用的关键字，但是不能滥用，否则会影响代码可读性，比如int，double这种简单类型就不要使用，一些不关心其具体类型的变量（比如lambda表达式）或者复杂类型就使用auto。\n\n+ decltype：编译器推导表达式的类型。\n\n> 具体的推导规则看了就忘实在记不住。\n\n### default & delete & final & override & explicit\n\n+ default ： 使用默认的函数定义，只用用于特殊成员函数（构造，析构之类）。\n\n```c++\nstruct A {\n  A() = default;\n  int a;\n  A(int i) { a = i; }\n};\nint main() {\n    A a;\n    return 0;\n}\n```\n\n+ delete ：如果没有定义特殊成员函数，编译器期就会生成默认的特殊成员函数，delete可以阻止这种行为。\n\n```c++\n//禁止对象的拷贝与赋值\nstruct A {\n    A() = default;\n    A(const A&) = delete;\n    A& operator=(const A&) = delete;\n    int a;\n    A(int i) { a = i; }\n};\n\nint main() {\n    A a1;\n    A a2 = a1;  // 错误，拷贝构造函数被禁用\n    A a3;\n    a3 = a1;  // 错误，拷贝赋值操作符被禁用\n}\n```\n\n\n+ final ：用于指定虚函数不能被重写或者类不能被继承。\n\n```C++\n class ChildOfBase : public Base {\n private:\n   int dontChangeMe() const final { return 1; }\n };\n \n class BadChildOfChild : public ChildOfBase {\n   int dontChangeMe() const override;  //ERROR\n }\n```\n\n```c++\nclass DontDeriveFromMe final {\n   // ...\n };\n \n class Failure : public DontDeriveFromMe { //ERROR\n   // ...\n };\n```\n\n+ override：用于确保一个函数是虚函数且重写了基类的虚函数。\n\n```c++\nstruct Base {\n    virtual void func() {\n        cout << \"base\" << endl;\n    }\n};\n\nstruct Derived : public Base{\n    void func() override { // 确保func被重写\n        cout << \"derived\" << endl;\n    }\n\n    void fu() override { // error，基类没有fu()，不可以被重写\n        \n    }\n};\n```\n\n+ explicit：专门用来修饰构造函数，表示只能显示构造，不能被隐式转换。\n\n```c++\nstruct A {\n    explicit A(int value) {\n        cout << \"value\" << endl;\n    }\n};\n\nint main() {\n    A a = 1; // error，不可以隐式转换\n    A aa(2); // ok\n    return 0;\n}\n```\n\n### 委托构造函数 & 继承构造函数\n\n+ 委托构造函数：允许同一个类中的一个构造函数（委托构造函数）调用另一个构造函数（目标构造函数），即在委托构造函数的初始化列表调用目标构造函数，执行顺序是先目标构造函数再委托构造函数。委托构造函数可以减少代码重复，避免相同的构造逻辑写多次。\n\n```c++\nstruct A {\n    A(){}\n    A(int a) { a_ = a; }\n\n    A(int a, int b) : A(a) { b_ = b; }\n\n    A(int a, int b, int c) : A(a, b) { c_ = c; }\n\n    int a_;\n    int b_;\n    int c_;\n};\n```\n\n+ 继承构造函数：允许派生类可以使用基类的构造函数。\n\n```c++\nstruct Base {\n    Base() {}\n    Base(int a) { a_ = a; }\n\n    Base(int a, int b) : Base(a) { b_ = b; }\n\n    Base(int a, int b, int c) : Base(a, b) { c_ = c; }\n\n    int a_;\n    int b_;\n    int c_;\n};\n\nstruct Derived : Base {\n    using Base::Base;//继承构造函数\n};\n\nint main() {\n    Derived a(1, 2, 3);\n    return 0;\n}\n```\n\n### 静态断言（static_assert）\n\nc++11引入static_assert声明，用于在编译期间检查，如果第一个参数值为false，则打印message，编译失败。\n\n```c++\nstatic_assert(true/false, message);\n```\n\n### enum class\n\n新增带作用域的枚举类型,普通的枚举可以自动转换为整型，且不同的枚举可以相互比较，以至于产生潜藏的bug，而带作用域的枚举就不会有这些问题。\n\n```c++\nenum class AColor {\n    kRed,\n    kGreen,\n    kBlue\n};\nenum class BColor {\n    kWhite,\n    kBlack,\n    kYellow\n};\n\n\nint main() {\n    if (AColor::kRed == BColor::kWhite) { // 编译失败\n        cout << \"red == white\" << endl;\n    }\n    return 0;\n}\n```\n\n所以一定要使用带作用域的枚举。\n\n### thread_local\n\n顾名思义，线程本地，被`thread_local`修饰的变量具有线程周期，每一个线程都拥有其只拥有一个该变量的独立实例。\n\n### attribute\n\n+ [[noreturn]]：表明一个函数一定不会返回，注意是不会返回，而不是没有返回值\n\n+ [[carries_dependency]]：看不懂\n\n  > 允许我们将dependency跨越函数进行传递，用于避免在弱一致性模型平台上产生不必要的内存栅栏导致代码效率降低。\n\n### 列表初始化(list initialization)\n\n在变量名后加上初始化列表来进行对象的初始化\n\n```c++\nint a{123};\nstd::string s{\"test\"}\n```\n\n**std::initializer_list**是实现列表初始化的关键，它可以接受任意长度的初始化列表，可以理解为存储特定类型的数组\n\n```c++\nvoid f(std::initializer_list<double> il);\n \nvoid g(float x)\n{\n   f({1, x, 3});\n}\n \nvoid h()\n{\n   f({1, 2, 3});\n}\n```\n\n### constexpr\n\nconstexpr修饰的是真正的常量，它会在编译期间就会被计算出来，整个运行过程中都不可以被改变，constexpr可以用于修饰函数，这个函数的返回值会尽可能在编译期间被计算出来当作一个常量，但是如果编译期间此函数不能被计算出来，那它就会当作一个普通函数被处理\n\n```c++\nconstexpr int func(int i) {\n    return i + 1;\n}\n\nint main() {\n    int i = 2;\n    func(i);// 普通函数\n    func(2);// 编译期间就会被计算出来\n}\n```\n\n### lambda表达式\n\n其中func是可以当作lambda表达式的名字，作为一个函数使用，capture是捕获列表，params是参数表，opt是函数选项(mutable之类)， ret是返回值类型，func_body是函数体。\n\n```c++\nauto func = [capture] (params) opt -> ret { func_body; };\n```\n\nlambda表达式允许捕获一定范围内的变量，但是不推荐默认捕获，明确捕获的变量\n\n- []不捕获任何变量\n- [&]引用捕获，捕获外部作用域所有变量，在函数体内当作引用使用\n\n- [=]值捕获，捕获外部作用域所有变量，在函数内内有个副本使用\n- [=, &a]值捕获外部作用域所有变量，按引用捕获a变量\n\n- [a]只值捕获a变量，不捕获其它变量\n- [this]捕获当前类中的this指针\n\n## Other\n\n其他的如智能指针，左右值之类比较重要的，需要单独写一篇文章来介绍。","slug":"C-11","published":1,"updated":"2024-05-21T06:50:51.262Z","comments":1,"layout":"post","photos":[],"_id":"clwg373eg0001bnpzdfmp5v3g","content":"<p>c++11相比c++17就比较熟悉了，原因当然是实践的比较多，自然就熟悉了。本文还是介绍我比较熟悉和比较简单的特性，太过熟悉的，比如nullptr，我不会讲也没有讲的必要，全部特性参照<a href=\"https://en.cppreference.com/w/cpp/11\">C++11 - cppreference.com</a>。</p>\n<h2 id=\"Core-language-features\"><a href=\"#Core-language-features\" class=\"headerlink\" title=\"Core language features\"></a>Core language features</h2><h3 id=\"auto-decltype\"><a href=\"#auto-decltype\" class=\"headerlink\" title=\"auto &amp; decltype\"></a>auto &amp; decltype</h3><ul>\n<li><p>auto：让编译器在编译期就推导出变量的类型。</p>\n<p>很好用的关键字，但是不能滥用，否则会影响代码可读性，比如int，double这种简单类型就不要使用，一些不关心其具体类型的变量（比如lambda表达式）或者复杂类型就使用auto。</p>\n</li>\n<li><p>decltype：编译器推导表达式的类型。</p>\n</li>\n</ul>\n<blockquote>\n<p>具体的推导规则看了就忘实在记不住。</p>\n</blockquote>\n<h3 id=\"default-delete-final-override-explicit\"><a href=\"#default-delete-final-override-explicit\" class=\"headerlink\" title=\"default &amp; delete &amp; final &amp; override &amp; explicit\"></a>default &amp; delete &amp; final &amp; override &amp; explicit</h3><ul>\n<li>default ： 使用默认的函数定义，只用用于特殊成员函数（构造，析构之类）。</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">A</span>() = <span class=\"keyword\">default</span>;</span><br><span class=\"line\">  <span class=\"type\">int</span> a;</span><br><span class=\"line\">  <span class=\"built_in\">A</span>(<span class=\"type\">int</span> i) &#123; a = i; &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    A a;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>delete ：如果没有定义特殊成员函数，编译器期就会生成默认的特殊成员函数，delete可以阻止这种行为。</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//禁止对象的拷贝与赋值</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">A</span>() = <span class=\"keyword\">default</span>;</span><br><span class=\"line\">    <span class=\"built_in\">A</span>(<span class=\"type\">const</span> A&amp;) = <span class=\"keyword\">delete</span>;</span><br><span class=\"line\">    A&amp; <span class=\"keyword\">operator</span>=(<span class=\"type\">const</span> A&amp;) = <span class=\"keyword\">delete</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> a;</span><br><span class=\"line\">    <span class=\"built_in\">A</span>(<span class=\"type\">int</span> i) &#123; a = i; &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    A a1;</span><br><span class=\"line\">    A a2 = a1;  <span class=\"comment\">// 错误，拷贝构造函数被禁用</span></span><br><span class=\"line\">    A a3;</span><br><span class=\"line\">    a3 = a1;  <span class=\"comment\">// 错误，拷贝赋值操作符被禁用</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<ul>\n<li>final ：用于指定虚函数不能被重写或者类不能被继承。</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ChildOfBase</span> : <span class=\"keyword\">public</span> Base &#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">  <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">dontChangeMe</span><span class=\"params\">()</span> <span class=\"type\">const</span> <span class=\"keyword\">final</span> </span>&#123; <span class=\"keyword\">return</span> <span class=\"number\">1</span>; &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">BadChildOfChild</span> : <span class=\"keyword\">public</span> ChildOfBase &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">dontChangeMe</span><span class=\"params\">()</span> <span class=\"type\">const</span> <span class=\"keyword\">override</span></span>;  <span class=\"comment\">//ERROR</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DontDeriveFromMe</span> <span class=\"keyword\">final</span> &#123;</span><br><span class=\"line\">   <span class=\"comment\">// ...</span></span><br><span class=\"line\"> &#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"keyword\">class</span> <span class=\"title class_\">Failure</span> : <span class=\"keyword\">public</span> DontDeriveFromMe &#123; <span class=\"comment\">//ERROR</span></span><br><span class=\"line\">   <span class=\"comment\">// ...</span></span><br><span class=\"line\"> &#125;;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>override：用于确保一个函数是虚函数且重写了基类的虚函数。</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Base</span> &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">func</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;base&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Derived</span> : <span class=\"keyword\">public</span> Base&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">func</span><span class=\"params\">()</span> <span class=\"keyword\">override</span> </span>&#123; <span class=\"comment\">// 确保func被重写</span></span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;derived&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">fu</span><span class=\"params\">()</span> <span class=\"keyword\">override</span> </span>&#123; <span class=\"comment\">// error，基类没有fu()，不可以被重写</span></span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>explicit：专门用来修饰构造函数，表示只能显示构造，不能被隐式转换。</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">explicit</span> <span class=\"title\">A</span><span class=\"params\">(<span class=\"type\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;value&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    A a = <span class=\"number\">1</span>; <span class=\"comment\">// error，不可以隐式转换</span></span><br><span class=\"line\">    <span class=\"function\">A <span class=\"title\">aa</span><span class=\"params\">(<span class=\"number\">2</span>)</span></span>; <span class=\"comment\">// ok</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"委托构造函数-继承构造函数\"><a href=\"#委托构造函数-继承构造函数\" class=\"headerlink\" title=\"委托构造函数 &amp; 继承构造函数\"></a>委托构造函数 &amp; 继承构造函数</h3><ul>\n<li>委托构造函数：允许同一个类中的一个构造函数（委托构造函数）调用另一个构造函数（目标构造函数），即在委托构造函数的初始化列表调用目标构造函数，执行顺序是先目标构造函数再委托构造函数。委托构造函数可以减少代码重复，避免相同的构造逻辑写多次。</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">A</span>()&#123;&#125;</span><br><span class=\"line\">    <span class=\"built_in\">A</span>(<span class=\"type\">int</span> a) &#123; a_ = a; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">A</span>(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b) : <span class=\"built_in\">A</span>(a) &#123; b_ = b; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">A</span>(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b, <span class=\"type\">int</span> c) : <span class=\"built_in\">A</span>(a, b) &#123; c_ = c; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> a_;</span><br><span class=\"line\">    <span class=\"type\">int</span> b_;</span><br><span class=\"line\">    <span class=\"type\">int</span> c_;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>继承构造函数：允许派生类可以使用基类的构造函数。</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Base</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">Base</span>() &#123;&#125;</span><br><span class=\"line\">    <span class=\"built_in\">Base</span>(<span class=\"type\">int</span> a) &#123; a_ = a; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Base</span>(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b) : <span class=\"built_in\">Base</span>(a) &#123; b_ = b; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Base</span>(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b, <span class=\"type\">int</span> c) : <span class=\"built_in\">Base</span>(a, b) &#123; c_ = c; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> a_;</span><br><span class=\"line\">    <span class=\"type\">int</span> b_;</span><br><span class=\"line\">    <span class=\"type\">int</span> c_;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Derived</span> : Base &#123;</span><br><span class=\"line\">    <span class=\"keyword\">using</span> Base::Base;<span class=\"comment\">//继承构造函数</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">Derived <span class=\"title\">a</span><span class=\"params\">(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"静态断言（static-assert）\"><a href=\"#静态断言（static-assert）\" class=\"headerlink\" title=\"静态断言（static_assert）\"></a>静态断言（static_assert）</h3><p>c++11引入static_assert声明，用于在编译期间检查，如果第一个参数值为false，则打印message，编译失败。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">static_assert</span>(<span class=\"literal\">true</span>/<span class=\"literal\">false</span>, message);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"enum-class\"><a href=\"#enum-class\" class=\"headerlink\" title=\"enum class\"></a>enum class</h3><p>新增带作用域的枚举类型,普通的枚举可以自动转换为整型，且不同的枚举可以相互比较，以至于产生潜藏的bug，而带作用域的枚举就不会有这些问题。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum class</span> <span class=\"title class_\">AColor</span> &#123;</span><br><span class=\"line\">    kRed,</span><br><span class=\"line\">    kGreen,</span><br><span class=\"line\">    kBlue</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">enum class</span> <span class=\"title class_\">BColor</span> &#123;</span><br><span class=\"line\">    kWhite,</span><br><span class=\"line\">    kBlack,</span><br><span class=\"line\">    kYellow</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (AColor::kRed == BColor::kWhite) &#123; <span class=\"comment\">// 编译失败</span></span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;red == white&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>所以一定要使用带作用域的枚举。</p>\n<h3 id=\"thread-local\"><a href=\"#thread-local\" class=\"headerlink\" title=\"thread_local\"></a>thread_local</h3><p>顾名思义，线程本地，被<code>thread_local</code>修饰的变量具有线程周期，每一个线程都拥有其只拥有一个该变量的独立实例。</p>\n<h3 id=\"attribute\"><a href=\"#attribute\" class=\"headerlink\" title=\"attribute\"></a>attribute</h3><ul>\n<li><p>[[noreturn]]：表明一个函数一定不会返回，注意是不会返回，而不是没有返回值</p>\n</li>\n<li><p>[[carries_dependency]]：看不懂</p>\n<blockquote>\n<p>允许我们将dependency跨越函数进行传递，用于避免在弱一致性模型平台上产生不必要的内存栅栏导致代码效率降低。</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"列表初始化-list-initialization\"><a href=\"#列表初始化-list-initialization\" class=\"headerlink\" title=\"列表初始化(list initialization)\"></a>列表初始化(list initialization)</h3><p>在变量名后加上初始化列表来进行对象的初始化</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> a&#123;<span class=\"number\">123</span>&#125;;</span><br><span class=\"line\">std::string s&#123;<span class=\"string\">&quot;test&quot;</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>std::initializer_list</strong>是实现列表初始化的关键，它可以接受任意长度的初始化列表，可以理解为存储特定类型的数组</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">f</span><span class=\"params\">(std::initializer_list&lt;<span class=\"type\">double</span>&gt; il)</span></span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">g</span><span class=\"params\">(<span class=\"type\">float</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">   <span class=\"built_in\">f</span>(&#123;<span class=\"number\">1</span>, x, <span class=\"number\">3</span>&#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">h</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">   <span class=\"built_in\">f</span>(&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"constexpr\"><a href=\"#constexpr\" class=\"headerlink\" title=\"constexpr\"></a>constexpr</h3><p>constexpr修饰的是真正的常量，它会在编译期间就会被计算出来，整个运行过程中都不可以被改变，constexpr可以用于修饰函数，这个函数的返回值会尽可能在编译期间被计算出来当作一个常量，但是如果编译期间此函数不能被计算出来，那它就会当作一个普通函数被处理</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">constexpr</span> <span class=\"type\">int</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"type\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> i + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> i = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"built_in\">func</span>(i);<span class=\"comment\">// 普通函数</span></span><br><span class=\"line\">    <span class=\"built_in\">func</span>(<span class=\"number\">2</span>);<span class=\"comment\">// 编译期间就会被计算出来</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"lambda表达式\"><a href=\"#lambda表达式\" class=\"headerlink\" title=\"lambda表达式\"></a>lambda表达式</h3><p>其中func是可以当作lambda表达式的名字，作为一个函数使用，capture是捕获列表，params是参数表，opt是函数选项(mutable之类)， ret是返回值类型，func_body是函数体。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">auto</span> func = [capture] (params) opt -&gt; ret &#123; func_body; &#125;;</span><br></pre></td></tr></table></figure>\n\n<p>lambda表达式允许捕获一定范围内的变量，但是不推荐默认捕获，明确捕获的变量</p>\n<ul>\n<li><p>[]不捕获任何变量</p>\n</li>\n<li><p>[&amp;]引用捕获，捕获外部作用域所有变量，在函数体内当作引用使用</p>\n</li>\n<li><p>[&#x3D;]值捕获，捕获外部作用域所有变量，在函数内内有个副本使用</p>\n</li>\n<li><p>[&#x3D;, &amp;a]值捕获外部作用域所有变量，按引用捕获a变量</p>\n</li>\n<li><p>[a]只值捕获a变量，不捕获其它变量</p>\n</li>\n<li><p>[this]捕获当前类中的this指针</p>\n</li>\n</ul>\n<h2 id=\"Other\"><a href=\"#Other\" class=\"headerlink\" title=\"Other\"></a>Other</h2><p>其他的如智能指针，左右值之类比较重要的，需要单独写一篇文章来介绍。</p>\n","length":3886,"excerpt":"","more":"<p>c++11相比c++17就比较熟悉了，原因当然是实践的比较多，自然就熟悉了。本文还是介绍我比较熟悉和比较简单的特性，太过熟悉的，比如nullptr，我不会讲也没有讲的必要，全部特性参照<a href=\"https://en.cppreference.com/w/cpp/11\">C++11 - cppreference.com</a>。</p>\n<h2 id=\"Core-language-features\"><a href=\"#Core-language-features\" class=\"headerlink\" title=\"Core language features\"></a>Core language features</h2><h3 id=\"auto-decltype\"><a href=\"#auto-decltype\" class=\"headerlink\" title=\"auto &amp; decltype\"></a>auto &amp; decltype</h3><ul>\n<li><p>auto：让编译器在编译期就推导出变量的类型。</p>\n<p>很好用的关键字，但是不能滥用，否则会影响代码可读性，比如int，double这种简单类型就不要使用，一些不关心其具体类型的变量（比如lambda表达式）或者复杂类型就使用auto。</p>\n</li>\n<li><p>decltype：编译器推导表达式的类型。</p>\n</li>\n</ul>\n<blockquote>\n<p>具体的推导规则看了就忘实在记不住。</p>\n</blockquote>\n<h3 id=\"default-delete-final-override-explicit\"><a href=\"#default-delete-final-override-explicit\" class=\"headerlink\" title=\"default &amp; delete &amp; final &amp; override &amp; explicit\"></a>default &amp; delete &amp; final &amp; override &amp; explicit</h3><ul>\n<li>default ： 使用默认的函数定义，只用用于特殊成员函数（构造，析构之类）。</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">A</span>() = <span class=\"keyword\">default</span>;</span><br><span class=\"line\">  <span class=\"type\">int</span> a;</span><br><span class=\"line\">  <span class=\"built_in\">A</span>(<span class=\"type\">int</span> i) &#123; a = i; &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    A a;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>delete ：如果没有定义特殊成员函数，编译器期就会生成默认的特殊成员函数，delete可以阻止这种行为。</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//禁止对象的拷贝与赋值</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">A</span>() = <span class=\"keyword\">default</span>;</span><br><span class=\"line\">    <span class=\"built_in\">A</span>(<span class=\"type\">const</span> A&amp;) = <span class=\"keyword\">delete</span>;</span><br><span class=\"line\">    A&amp; <span class=\"keyword\">operator</span>=(<span class=\"type\">const</span> A&amp;) = <span class=\"keyword\">delete</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> a;</span><br><span class=\"line\">    <span class=\"built_in\">A</span>(<span class=\"type\">int</span> i) &#123; a = i; &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    A a1;</span><br><span class=\"line\">    A a2 = a1;  <span class=\"comment\">// 错误，拷贝构造函数被禁用</span></span><br><span class=\"line\">    A a3;</span><br><span class=\"line\">    a3 = a1;  <span class=\"comment\">// 错误，拷贝赋值操作符被禁用</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<ul>\n<li>final ：用于指定虚函数不能被重写或者类不能被继承。</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ChildOfBase</span> : <span class=\"keyword\">public</span> Base &#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">  <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">dontChangeMe</span><span class=\"params\">()</span> <span class=\"type\">const</span> <span class=\"keyword\">final</span> </span>&#123; <span class=\"keyword\">return</span> <span class=\"number\">1</span>; &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">BadChildOfChild</span> : <span class=\"keyword\">public</span> ChildOfBase &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">dontChangeMe</span><span class=\"params\">()</span> <span class=\"type\">const</span> <span class=\"keyword\">override</span></span>;  <span class=\"comment\">//ERROR</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DontDeriveFromMe</span> <span class=\"keyword\">final</span> &#123;</span><br><span class=\"line\">   <span class=\"comment\">// ...</span></span><br><span class=\"line\"> &#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"keyword\">class</span> <span class=\"title class_\">Failure</span> : <span class=\"keyword\">public</span> DontDeriveFromMe &#123; <span class=\"comment\">//ERROR</span></span><br><span class=\"line\">   <span class=\"comment\">// ...</span></span><br><span class=\"line\"> &#125;;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>override：用于确保一个函数是虚函数且重写了基类的虚函数。</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Base</span> &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">func</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;base&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Derived</span> : <span class=\"keyword\">public</span> Base&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">func</span><span class=\"params\">()</span> <span class=\"keyword\">override</span> </span>&#123; <span class=\"comment\">// 确保func被重写</span></span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;derived&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">fu</span><span class=\"params\">()</span> <span class=\"keyword\">override</span> </span>&#123; <span class=\"comment\">// error，基类没有fu()，不可以被重写</span></span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>explicit：专门用来修饰构造函数，表示只能显示构造，不能被隐式转换。</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">explicit</span> <span class=\"title\">A</span><span class=\"params\">(<span class=\"type\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;value&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    A a = <span class=\"number\">1</span>; <span class=\"comment\">// error，不可以隐式转换</span></span><br><span class=\"line\">    <span class=\"function\">A <span class=\"title\">aa</span><span class=\"params\">(<span class=\"number\">2</span>)</span></span>; <span class=\"comment\">// ok</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"委托构造函数-继承构造函数\"><a href=\"#委托构造函数-继承构造函数\" class=\"headerlink\" title=\"委托构造函数 &amp; 继承构造函数\"></a>委托构造函数 &amp; 继承构造函数</h3><ul>\n<li>委托构造函数：允许同一个类中的一个构造函数（委托构造函数）调用另一个构造函数（目标构造函数），即在委托构造函数的初始化列表调用目标构造函数，执行顺序是先目标构造函数再委托构造函数。委托构造函数可以减少代码重复，避免相同的构造逻辑写多次。</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">A</span>()&#123;&#125;</span><br><span class=\"line\">    <span class=\"built_in\">A</span>(<span class=\"type\">int</span> a) &#123; a_ = a; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">A</span>(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b) : <span class=\"built_in\">A</span>(a) &#123; b_ = b; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">A</span>(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b, <span class=\"type\">int</span> c) : <span class=\"built_in\">A</span>(a, b) &#123; c_ = c; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> a_;</span><br><span class=\"line\">    <span class=\"type\">int</span> b_;</span><br><span class=\"line\">    <span class=\"type\">int</span> c_;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>继承构造函数：允许派生类可以使用基类的构造函数。</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Base</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">Base</span>() &#123;&#125;</span><br><span class=\"line\">    <span class=\"built_in\">Base</span>(<span class=\"type\">int</span> a) &#123; a_ = a; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Base</span>(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b) : <span class=\"built_in\">Base</span>(a) &#123; b_ = b; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Base</span>(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b, <span class=\"type\">int</span> c) : <span class=\"built_in\">Base</span>(a, b) &#123; c_ = c; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> a_;</span><br><span class=\"line\">    <span class=\"type\">int</span> b_;</span><br><span class=\"line\">    <span class=\"type\">int</span> c_;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Derived</span> : Base &#123;</span><br><span class=\"line\">    <span class=\"keyword\">using</span> Base::Base;<span class=\"comment\">//继承构造函数</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">Derived <span class=\"title\">a</span><span class=\"params\">(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"静态断言（static-assert）\"><a href=\"#静态断言（static-assert）\" class=\"headerlink\" title=\"静态断言（static_assert）\"></a>静态断言（static_assert）</h3><p>c++11引入static_assert声明，用于在编译期间检查，如果第一个参数值为false，则打印message，编译失败。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">static_assert</span>(<span class=\"literal\">true</span>/<span class=\"literal\">false</span>, message);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"enum-class\"><a href=\"#enum-class\" class=\"headerlink\" title=\"enum class\"></a>enum class</h3><p>新增带作用域的枚举类型,普通的枚举可以自动转换为整型，且不同的枚举可以相互比较，以至于产生潜藏的bug，而带作用域的枚举就不会有这些问题。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum class</span> <span class=\"title class_\">AColor</span> &#123;</span><br><span class=\"line\">    kRed,</span><br><span class=\"line\">    kGreen,</span><br><span class=\"line\">    kBlue</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">enum class</span> <span class=\"title class_\">BColor</span> &#123;</span><br><span class=\"line\">    kWhite,</span><br><span class=\"line\">    kBlack,</span><br><span class=\"line\">    kYellow</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (AColor::kRed == BColor::kWhite) &#123; <span class=\"comment\">// 编译失败</span></span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;red == white&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>所以一定要使用带作用域的枚举。</p>\n<h3 id=\"thread-local\"><a href=\"#thread-local\" class=\"headerlink\" title=\"thread_local\"></a>thread_local</h3><p>顾名思义，线程本地，被<code>thread_local</code>修饰的变量具有线程周期，每一个线程都拥有其只拥有一个该变量的独立实例。</p>\n<h3 id=\"attribute\"><a href=\"#attribute\" class=\"headerlink\" title=\"attribute\"></a>attribute</h3><ul>\n<li><p>[[noreturn]]：表明一个函数一定不会返回，注意是不会返回，而不是没有返回值</p>\n</li>\n<li><p>[[carries_dependency]]：看不懂</p>\n<blockquote>\n<p>允许我们将dependency跨越函数进行传递，用于避免在弱一致性模型平台上产生不必要的内存栅栏导致代码效率降低。</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"列表初始化-list-initialization\"><a href=\"#列表初始化-list-initialization\" class=\"headerlink\" title=\"列表初始化(list initialization)\"></a>列表初始化(list initialization)</h3><p>在变量名后加上初始化列表来进行对象的初始化</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> a&#123;<span class=\"number\">123</span>&#125;;</span><br><span class=\"line\">std::string s&#123;<span class=\"string\">&quot;test&quot;</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>std::initializer_list</strong>是实现列表初始化的关键，它可以接受任意长度的初始化列表，可以理解为存储特定类型的数组</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">f</span><span class=\"params\">(std::initializer_list&lt;<span class=\"type\">double</span>&gt; il)</span></span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">g</span><span class=\"params\">(<span class=\"type\">float</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">   <span class=\"built_in\">f</span>(&#123;<span class=\"number\">1</span>, x, <span class=\"number\">3</span>&#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">h</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">   <span class=\"built_in\">f</span>(&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"constexpr\"><a href=\"#constexpr\" class=\"headerlink\" title=\"constexpr\"></a>constexpr</h3><p>constexpr修饰的是真正的常量，它会在编译期间就会被计算出来，整个运行过程中都不可以被改变，constexpr可以用于修饰函数，这个函数的返回值会尽可能在编译期间被计算出来当作一个常量，但是如果编译期间此函数不能被计算出来，那它就会当作一个普通函数被处理</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">constexpr</span> <span class=\"type\">int</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"type\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> i + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> i = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"built_in\">func</span>(i);<span class=\"comment\">// 普通函数</span></span><br><span class=\"line\">    <span class=\"built_in\">func</span>(<span class=\"number\">2</span>);<span class=\"comment\">// 编译期间就会被计算出来</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"lambda表达式\"><a href=\"#lambda表达式\" class=\"headerlink\" title=\"lambda表达式\"></a>lambda表达式</h3><p>其中func是可以当作lambda表达式的名字，作为一个函数使用，capture是捕获列表，params是参数表，opt是函数选项(mutable之类)， ret是返回值类型，func_body是函数体。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">auto</span> func = [capture] (params) opt -&gt; ret &#123; func_body; &#125;;</span><br></pre></td></tr></table></figure>\n\n<p>lambda表达式允许捕获一定范围内的变量，但是不推荐默认捕获，明确捕获的变量</p>\n<ul>\n<li><p>[]不捕获任何变量</p>\n</li>\n<li><p>[&amp;]引用捕获，捕获外部作用域所有变量，在函数体内当作引用使用</p>\n</li>\n<li><p>[&#x3D;]值捕获，捕获外部作用域所有变量，在函数内内有个副本使用</p>\n</li>\n<li><p>[&#x3D;, &amp;a]值捕获外部作用域所有变量，按引用捕获a变量</p>\n</li>\n<li><p>[a]只值捕获a变量，不捕获其它变量</p>\n</li>\n<li><p>[this]捕获当前类中的this指针</p>\n</li>\n</ul>\n<h2 id=\"Other\"><a href=\"#Other\" class=\"headerlink\" title=\"Other\"></a>Other</h2><p>其他的如智能指针，左右值之类比较重要的，需要单独写一篇文章来介绍。</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"clwg373ee0000bnpzeip0btt7","tag_id":"clwg373eh0002bnpz1r536unp","_id":"clwg373ej0005bnpz2wyg8jlq"},{"post_id":"clwg373ee0000bnpzeip0btt7","tag_id":"clwg373ei0003bnpzhoda140v","_id":"clwg373ej0006bnpz9f7qgwhk"},{"post_id":"clwg373eg0001bnpzdfmp5v3g","tag_id":"clwg373eh0002bnpz1r536unp","_id":"clwg373ek0008bnpzeo623ssc"},{"post_id":"clwg373eg0001bnpzdfmp5v3g","tag_id":"clwg373ej0007bnpz0xry3i5r","_id":"clwg373ek0009bnpz8hj13ezc"}],"Tag":[{"name":"C++","_id":"clwg373eh0002bnpz1r536unp"},{"name":"C++17","_id":"clwg373ei0003bnpzhoda140v"},{"name":"C++11","_id":"clwg373ej0007bnpz0xry3i5r"}]}}